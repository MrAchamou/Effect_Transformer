
const fs = require('fs').promises;

async function runCompleteSystemTest() {
  console.log('üéØ === TEST SYST√àME COMPLET ===\n');
  
  try {
    // 1. Test de base des fichiers critiques
    console.log('1Ô∏è‚É£ V√©rification des fichiers critiques...');
    await testCriticalFiles();
    
    // 2. Test des services
    console.log('\n2Ô∏è‚É£ V√©rification des services...');
    await testServices();
    
    // 3. Test de la configuration
    console.log('\n3Ô∏è‚É£ V√©rification de la configuration...');
    await testConfiguration();
    
    // 4. Test des d√©pendances
    console.log('\n4Ô∏è‚É£ V√©rification des d√©pendances...');
    await testDependencies();
    
    // 5. R√©parations automatiques si n√©cessaire
    console.log('\n5Ô∏è‚É£ R√©parations automatiques...');
    await performEmergencyRepairs();
    
    console.log('\nüèÜ === R√âSULTAT FINAL ===');
    console.log('‚úÖ SYST√àME OP√âRATIONNEL');
    
    return true;
    
  } catch (error) {
    console.error('üí• Erreur durant le test syst√®me:', error.message);
    console.log('üîß Tentative de r√©paration d\'urgence...');
    
    try {
      await performEmergencyRepairs();
      console.log('‚úÖ R√©parations d\'urgence termin√©es');
      return true;
    } catch (repairError) {
      console.error('‚ùå R√©parations √©chou√©es:', repairError.message);
      return false;
    }
  }
}

async function testCriticalFiles() {
  const criticalFiles = [
    'server/index.ts',
    'server/routes.ts',
    'server/services/universal-preprocessor.ts',
    'server/services/js-preprocessor.ts',
    'server/services/documentation-packager.ts',
    'package.json'
  ];
  
  let issues = 0;
  
  for (const file of criticalFiles) {
    try {
      const stat = await fs.stat(file);
      const content = await fs.readFile(file, 'utf-8');
      
      if (content.length < 50) {
        console.log(`  ‚ö†Ô∏è ${file}: Fichier trop petit (${content.length} caract√®res)`);
        issues++;
      } else {
        console.log(`  ‚úÖ ${file}: OK (${stat.size} bytes)`);
      }
    } catch (error) {
      console.log(`  ‚ùå ${file}: MANQUANT - ${error.message}`);
      issues++;
    }
  }
  
  if (issues > 0) {
    console.log(`\n‚ö†Ô∏è ${issues} probl√®me(s) d√©tect√©(s) dans les fichiers critiques`);
  }
  
  return issues === 0;
}

async function testServices() {
  const services = [
    'universal-preprocessor',
    'js-preprocessor',
    'documentation-packager',
    'code-validator',
    'file-processor'
  ];
  
  let issues = 0;
  
  for (const service of services) {
    try {
      const servicePath = `server/services/${service}.ts`;
      const content = await fs.readFile(servicePath, 'utf-8');
      
      const hasExport = content.includes('export class') || content.includes('export default');
      
      if (hasExport) {
        console.log(`  ‚úÖ ${service}: Service OK`);
      } else {
        console.log(`  ‚ö†Ô∏è ${service}: Pas d'exports d√©tect√©s`);
        issues++;
      }
    } catch (error) {
      console.log(`  ‚ùå ${service}: MANQUANT - ${error.message}`);
      issues++;
    }
  }
  
  if (issues > 0) {
    console.log(`\n‚ö†Ô∏è ${issues} probl√®me(s) d√©tect√©(s) dans les services`);
  }
  
  return issues === 0;
}

async function testConfiguration() {
  const configFiles = [
    'server/config/transformation-levels.json',
    'server/config/modules-definitions.json'
  ];
  
  let issues = 0;
  
  for (const file of configFiles) {
    try {
      const content = await fs.readFile(file, 'utf-8');
      const parsed = JSON.parse(content);
      
      if (Object.keys(parsed).length > 0) {
        console.log(`  ‚úÖ ${file.split('/').pop()}: JSON valide`);
      } else {
        console.log(`  ‚ö†Ô∏è ${file.split('/').pop()}: JSON vide`);
        issues++;
      }
    } catch (error) {
      console.log(`  ‚ùå ${file.split('/').pop()}: ${error.message}`);
      issues++;
    }
  }
  
  return issues === 0;
}

async function testDependencies() {
  try {
    const packageContent = await fs.readFile('package.json', 'utf-8');
    const pkg = JSON.parse(packageContent);
    
    const requiredDeps = ['express', 'multer', 'zod'];
    let missing = 0;
    
    for (const dep of requiredDeps) {
      if (pkg.dependencies?.[dep] || pkg.devDependencies?.[dep]) {
        console.log(`  ‚úÖ ${dep}: Install√©`);
      } else {
        console.log(`  ‚ùå ${dep}: MANQUANT`);
        missing++;
      }
    }
    
    return missing === 0;
  } catch (error) {
    console.log(`  ‚ùå package.json: ${error.message}`);
    return false;
  }
}

async function performEmergencyRepairs() {
  console.log('üö® D√©marrage des r√©parations...');
  
  // Cr√©er les dossiers manquants
  const requiredDirs = [
    'server/services',
    'server/config',
    'server/utils',
    'uploads'
  ];
  
  for (const dir of requiredDirs) {
    try {
      await fs.mkdir(dir, { recursive: true });
      console.log(`  üìÅ Dossier cr√©√©: ${dir}`);
    } catch (error) {
      // Ignorer si le dossier existe d√©j√†
      if (error.code !== 'EEXIST') {
        console.log(`  ‚ö†Ô∏è Erreur cr√©ation ${dir}: ${error.message}`);
      }
    }
  }
  
  // V√©rifier les fichiers de configuration critiques
  const configChecks = [
    {
      file: 'server/config/transformation-levels.json',
      content: {
        "1": { "name": "Basic Enhancement", "description": "Basic improvements" },
        "2": { "name": "Advanced Enhancement", "description": "Advanced improvements" }
      }
    }
  ];
  
  for (const config of configChecks) {
    try {
      await fs.access(config.file);
      console.log(`  ‚úÖ ${config.file}: Existe d√©j√†`);
    } catch (error) {
      try {
        await fs.writeFile(config.file, JSON.stringify(config.content, null, 2));
        console.log(`  üìù ${config.file}: Cr√©√© avec contenu par d√©faut`);
      } catch (writeError) {
        console.log(`  ‚ùå Erreur cr√©ation ${config.file}: ${writeError.message}`);
      }
    }
  }
  
  console.log('‚úÖ R√©parations termin√©es');
}

// Ex√©cution directe
if (require.main === module) {
  runCompleteSystemTest()
    .then(success => {
      console.log(`\nüìä Test termin√©: ${success ? 'SUCC√àS' : '√âCHEC'}`);
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Test syst√®me √©chou√© compl√®tement:', error);
      process.exit(1);
    });
}

module.exports = { runCompleteSystemTest };
