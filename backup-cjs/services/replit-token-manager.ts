interface TokenCache {
  token: string;
  fetchedAt: number;
  expiresAt: number;
  userId?: string;
}

export class ReplitTokenManager {
  private lastToken: string | null = null;
  private lastFetch: number = 0;
  private tokenCacheTime = 300000; // 5 minutes
  private tokenCache: TokenCache | null = null;
  private fetchAttempts = 0;
  private maxRetries = 3;
  private isValidatingToken = false;

  constructor() {
    this.validateEnvironment();
    this.setupCleanupInterval();
  }

  private setupCleanupInterval(): void {
    // Nettoyer le cache p√©riodiquement
    setInterval(() => {
      if (this.tokenCache && Date.now() > this.tokenCache.expiresAt) {
        console.log('[TokenManager] Cache token expir√©, nettoyage automatique');
        this.tokenCache = null;
        this.lastToken = null;
      }
    }, 60000); // V√©rification chaque minute
  }

  private validateEnvironment(): void {
    if (!process.env.REPL_ID) {
      console.warn('[TokenManager] Environnement Replit non d√©tect√©. Certaines fonctionnalit√©s pourraient √™tre limit√©es.');
    }
  }

  private getCookieString(): string {
    // Fonction de simulation pour obtenir les cookies Replit
    // Dans une vraie application, vous auriez besoin d'une m√©thode pour r√©cup√©rer les cookies de session
    // Par exemple, en lisant un fichier de session ou en utilisant un m√©canisme d'authentification
    // Pour l'instant, nous utiliserons une valeur fictive ou essaierons de trouver un token dans les variables d'environnement
    const token = process.env.REPLIT_AI_TOKEN || process.env.REPL_TOKEN || process.env.REPLIT_TOKEN;
    if (token) {
      // Si un token est trouv√© dans les variables d'environnement, on pourrait l'utiliser pour simuler une authentification
      // Cependant, l'API 'replit.com/api/account' attend des cookies pour l'authentification.
      // Il est donc pr√©f√©rable d'utiliser une approche qui g√®re les cookies si possible.
      // Pour cet exemple, si un token est pr√©sent, nous retournons une cha√Æne qui pourrait *potentiellement* fonctionner
      // si Replit utilise un sch√©ma de cookie simple bas√© sur un token (ce qui n'est pas garanti).
      // Une meilleure approche serait d'avoir un moyen de g√©rer la session active.
      console.log('[TokenManager] Tentative d\'utilisation d\'un token d\'environnement pour les cookies.');
      // Ceci est une supposition, l'API Replit peut n√©cessiter des cookies sp√©cifiques de session
      return `__session=${token};`; 
    }
    console.warn('[TokenManager] Aucun cookie de session trouv√©. L\'authentification pourrait √©chouer.');
    return '';
  }

  private extractOrGenerateToken(userData: any): string {
    // Dans le contexte de Replit, le "token" pourrait √™tre li√© √† l'ID utilisateur ou √† des identifiants de session.
    // Si l'API retourne des informations utilisateur, nous pouvons essayer d'en d√©duire un token.
    // Une approche courante pour les sessions web est d'utiliser des identifiants uniques de session.
    // Pour cet exemple, nous allons simuler la cr√©ation d'un token bas√© sur l'ID utilisateur et un timestamp.
    // Dans une impl√©mentation r√©elle, vous devriez utiliser la logique fournie par Replit ou un m√©canisme de gestion de session robuste.

    // Si `userData.token` existe, c'est l'id√©al
    if (userData.token) {
      return userData.token;
    }

    // Sinon, nous g√©n√©rons un token bas√© sur l'ID utilisateur et un timestamp.
    // C'est une simplification pour d√©montrer le fonctionnement du cache.
    const generatedToken = `replit_user_${userData.id}_${Date.now()}`;
    console.log('[TokenManager] Token g√©n√©r√© √† partir des donn√©es utilisateur.');
    return generatedToken;
  }

  async getValidToken(): Promise<string> {
    const now = Date.now();

    // √âviter les appels concurrents
    if (this.isValidatingToken) {
      console.log('[TokenManager] Validation d√©j√† en cours, attente...');
      await new Promise(resolve => setTimeout(resolve, 100));
      return this.getValidToken();
    }

    try {
      this.isValidatingToken = true;

      // Return cached token if still valid
      if (this.tokenCache && now < this.tokenCache.expiresAt) {
        console.log('[TokenManager] Using cached token');
        return this.tokenCache.token;
      }

      console.log('[TokenManager] Fetching new token from Replit API');

      // Reset fetch attempts if enough time has passed
      if (now - this.lastFetch > this.tokenCacheTime) {
        this.fetchAttempts = 0;
      }

      if (this.fetchAttempts >= this.maxRetries) {
        throw new Error('Maximum de tentatives d\'obtention de token atteint');
      }

      this.fetchAttempts++;

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15s timeout

      try {
        const response = await fetch('https://replit.com/api/account', {
          headers: {
            'Cookie': this.getCookieString(),
            'User-Agent': 'Mozilla/5.0 (compatible; ReplitAI/1.0)',
            'Accept': 'application/json'
          },
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.user || !data.user.id) {
          throw new Error('Invalid user data received');
        }

        // Extract token from user ID or generate based on session
        const token = this.extractOrGenerateToken(data.user);

        // Cache with expiration
        this.tokenCache = {
          token,
          fetchedAt: now,
          expiresAt: now + this.tokenCacheTime,
          userId: data.user.id.toString()
        };

        this.lastToken = token;
        this.lastFetch = now;
        this.fetchAttempts = 0; // Reset sur succ√®s

        console.log(`[TokenManager] Token fetched and cached successfully (User: ${data.user.id})`);
        return token;

      } catch (fetchError) {
        clearTimeout(timeoutId);

        if (fetchError.name === 'AbortError') {
          throw new Error('Timeout lors de la r√©cup√©ration du token');
        }

        throw fetchError;
      }

    } catch (error) {
      console.error('[TokenManager] Failed to fetch token:', error);

      // Try to use old cached token if available as fallback
      if (this.tokenCache && this.tokenCache.token) {
        console.log('[TokenManager] Using expired cached token as fallback');
        return this.tokenCache.token;
      }

      if (this.lastToken) {
        console.log('[TokenManager] Using last known token as fallback');
        return this.lastToken;
      }

      throw new Error(`Token fetch failed: ${error.message}`);

    } finally {
      this.isValidatingToken = false;
    }
  }

  // M√©thode pour rafra√Æchir le token manuellement
  async refreshToken(): Promise<void> {
    this.tokenCache = null;
    this.lastToken = null;
    this.lastFetch = 0;
    this.fetchAttempts = 0;
    console.log('üîÑ Cache token r√©initialis√©');
  }

  // M√©thode pour diagnostiquer les probl√®mes de token
  async diagnoseTokenIssues(): Promise<string[]> {
    const issues: string[] = [];

    const envTokens = Object.keys(process.env)
      .filter(key => key.toLowerCase().includes('replit') || key.toLowerCase().includes('token'))
      .map(key => `${key}: ${process.env[key] ? '‚úÖ D√©fini' : '‚ùå Vide'}`);

    if (envTokens.length === 0) {
      issues.push('‚ùå Aucune variable d\'environnement token trouv√©e');
    } else {
      issues.push('üìã Variables d\'environnement d√©tect√©es:');
      issues.push(...envTokens);
    }

    if (process.env.REPL_ID) {
      issues.push(`‚úÖ Environnement Replit: ${process.env.REPL_ID}`);
    } else {
      issues.push('‚ö†Ô∏è Pas dans un environnement Replit officiel');
    }
    
    // Ajouter une v√©rification de l'√©tat du cache
    if (this.tokenCache) {
        issues.push(`üìä Cache Token: Valide jusqu'√† ${new Date(this.tokenCache.expiresAt).toLocaleString()}`);
    } else {
        issues.push('üìä Cache Token: Vide');
    }

    // Essayer d'obtenir un token pour v√©rifier la validit√©
    try {
        await this.getValidToken();
        issues.push('‚úÖ La r√©cup√©ration du token a r√©ussi.');
    } catch (error) {
        issues.push(`‚ùå La r√©cup√©ration du token a √©chou√©: ${error.message}`);
    }

    return issues;
  }
}

export const replitTokenManager = new ReplitTokenManager();