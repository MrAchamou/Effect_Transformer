// ‚ú® Code transform√© avec Digital Alchemy Lab
// Niveau: Premium
// Modules appliqu√©s: ContentAnalyzer, SmartOptimizer, ColorHarmonizer, EffectEnhancer, PerformanceBoost, AdaptiveSync, AIPredictor, CreativeEngine, SignatureStyle
// G√©n√©ration: 2025-08-22T23:50:40.987Z

// rain-simulation.js

export const rainSimulationEffect = {
  id: "video-rain-simulation-particles-053",
  name: "Simulation Pluie Particules R√©aliste",
  
  description: `## üåßÔ∏è EFFET 53 : RAIN_SIMULATION

**CAT√âGORIE :** VID√âO
**EFFET DEMAND√â :** Rain_Simulation
**ID UNIQUE :** video-rain-simulation-particles-053
**NOM AFFICHAGE :** Simulation Pluie Particules R√©aliste

**DESCRIPTION :** Une simulation r√©aliste de pluie est ajout√©e √† la vid√©o. Les gouttes de pluie tombent avec des √©claboussures sur les surfaces, et des ondulations se forment dans l'eau. L'intensit√© de la pluie, la taille des gouttes et la direction du vent sont ajustables, cr√©ant une ambiance pluvieuse cr√©dible.

**SP√âCIFICATIONS ADDICTION :**
- Simulation m√©t√©orologique r√©aliste avec √©quations atmosph√©riques
- Gouttes d'eau suivant lois balistique et r√©sistance air
- √âclaboussures ob√©issant conservation quantit√© mouvement
- Ondulations surface respectant √©quations ondes capillaires

--------------------------------------------------------------------------

üåßÔ∏è RAIN_SIMULATION EFFECT CR√â√â !
‚ú® SYST√àME M√âT√âOROLOGIQUE AUTHENTIQUE :

‚òî M√âCANIQUE PR√âCIPITATIONS R√âALISTE :
√âquations balistique : Trajectoires gouttes champ gravitationnel
R√©sistance a√©rodynamique : Tra√Æn√©e fluide vitesse terminale
Distribution tailles : Loi Marshall-Palmer gouttes pluie
Coalescence collision : Fusion gouttes contact atmosph√©rique
√âvaporation dynamique : Perte masse transfert vapeur
Effet Magnus : Rotation gouttes d√©viation trajectoire

üí® SYST√àME VENT AUTHENTIQUE :
Champs vitesse : √âcoulement turbulent atmosph√©rique
Cisaillement vertical : Gradient vitesse altitude
Rafales stochastiques : Fluctuations temporelles al√©atoires
Effet Coriolis : D√©viation rotation terrestre
Convection thermique : Mouvements ascendants air chaud
Instabilit√©s Kelvin-Helmholtz : Turbulence cisaillement

üß† INTELLIGENCE M√âT√âOROLOGIQUE :
Transport vapeur : √âquations diffusion humidit√©
Thermodynamique : √âchanges chaleur latente condensation
Microphysique nuages : Formation croissance gouttelettes
√âlectrification : Accumulation charges √©lectrostatiques
Acoustique : Propagation sons impacts gouttes
Optique atmosph√©rique : Diffusion lumi√®re pr√©cipitations

üé≠ DYNAMIQUE MULTI-PR√âCIPITATIONS :
Bruine fine : Gouttelettes microscopiques suspendues
Pluie mod√©r√©e : Gouttes moyennes trajectoires stables
Averse intense : Grosses gouttes vitesse √©lev√©e
Orage violent : Pr√©cipitations torrentielles turbulentes
Gr√™le glac√©e : Particules solides rebondissements
Neige fondue : Cristaux partiellement fondus

üéÆ PARAM√àTRES M√âT√âOROLOGIQUES :
Intensit√© : Taux pr√©cipitation en mm/h
Taille : Diam√®tre gouttes en mm
Direction : Angle vent en degr√©s
Vitesse : Force vent en m/s
Turbulence : Chaos atmosph√©rique
Temp√©rature : Conditions thermiques en ¬∞C`,

  category: "vid√©o",
  // ... reste de la structure
};

class RainSimulationEffect extends BaseEffect {
    constructor(config = {}) {
        super({
            id: 'video-rain-simulation-particles-053',
            name: 'Simulation Pluie Particules R√©aliste',
            category: 'vid√©o',
            version: '1.0',
            performance: 'high',
            parameters: {
                intensit√©: { type: 'range', min: 0.1, max: 3, default: 1.0 },
                taille: { type: 'range', min: 0.5, max: 5, default: 2.0 },
                direction: { type: 'range', min: 0, max: 360, default: 270 },
                vitesse: { type: 'range', min: 0, max: 20, default: 5 },
                turbulence: { type: 'range', min: 0, max: 1, default: 0.3 },
                temp√©rature: { type: 'range', min: -10, max: 40, default: 15 }
            }
        });

        // SYST√àME PRINCIPAL DE L'EFFET
        this.temps = 0;
        this.gouttesPluie = [];
        this.√©claboussures = [];
        this.ondulationsSurface = [];
        this.ventAtmosph√©rique = { x: 0, y: 0, z: 0 };
        
        // VARIABLES M√âT√âOROLOGIQUES
        this.tauxPr√©cipitation = 10; // mm/h
        this.diam√®treGouttes = 2; // mm
        this.vitesseVent = 5; // m/s
        this.directionVent = 270; // degr√©s (270 = ouest)
        this.niveauTurbulence = 0.3; // 0-1
        this.temp√©ratureAir = 15; // ¬∞C
        this.humidit√©Relative = 80; // %
        this.pressionAtmosph√©rique = 1013.25; // hPa
        
        // SYST√àME DE GOUTTES COMPLEXE
        this.distributionTailles = [];
        this.coalescenceEvents = [];
        this.√©vaporationActive = [];
        this.trajectoiresBalistiques = [];
        
        // EFFET SURFACES ET IMPACTS
        this.surfacesImpact = [];
        this.zones√âclaboussures = [];
        this.ondulationsEau = [];
        this.ruissellementSurfaces = [];
        
        // Canvas pour effets complexes
        this.canvasGouttes = null;
        this.ctxGouttes = null;
        this.canvas√âclaboussures = null;
        this.ctx√âclaboussures = null;
        this.canvasOndulations = null;
        this.ctxOndulations = null;
        this.canvasVent = null;
        this.ctxVent = null;
        
        // MICRO-VARIATIONS ATMOSPH√âRIQUES
        this.fluctuationsThermiques = [];
        this.turbulenceLocale = 0;
        this.respirationAtmosph√©rique = 0;
        
        // SYST√àME √âV√âNEMENTS M√âT√âOROLOGIQUES
        this.orageActif = false;
        this.prochaineRafale = 0;
        this.dur√©ePr√©cipitation = 0;
        this.typePr√©cipitation = 'pluie_mod√©r√©e'; // bruine, pluie_mod√©r√©e, averse_intense, orage_violent
        
        // M√âMOIRE ET ADAPTATION
        this.historiqueM√©t√©orologique = [];
        this.adaptationClimatique = 0;
        this.zonesConvection = new Map();
        this.efficacit√©Rendu = 0.9;
        
        // PHYSIQUE ATMOSPH√âRIQUE
        this.√©nergieLibre = 0; // √ânergie syst√®me atmosph√©rique
        this.entropieM√©t√©orologique = 0; // D√©sordre syst√®me
        this.pressionVapeur = 0; // Pression partielle vapeur eau
        this.pointRos√©e = 0; // Temp√©rature condensation
        
        // TYPES DE PR√âCIPITATIONS DISPONIBLES
        this.biblioth√®quePr√©cipitations = {
            bruine: { 
                diam√®tre: 0.2, 
                vitesse: 1,
                densit√©: 1000,
                couleur: { r: 200, g: 220, b: 255, a: 0.3 },
                fr√©quence: 0.1,
                dur√©e: 30000 // ms
            },
            pluie_mod√©r√©e: { 
                diam√®tre: 2, 
                vitesse: 5,
                densit√©: 500,
                couleur: { r: 180, g: 200, b: 255, a: 0.6 },
                fr√©quence: 0.5,
                dur√©e: 15000 // ms
            },
            averse_intense: { 
                diam√®tre: 4, 
                vitesse: 10,
                densit√©: 200,
                couleur: { r: 160, g: 180, b: 255, a: 0.8 },
                fr√©quence: 1.0,
                dur√©e: 5000 // ms
            },
            orage_violent: { 
                diam√®tre: 6, 
                vitesse: 15,
                densit√©: 100,
                couleur: { r: 140, g: 160, b: 255, a: 1.0 },
                fr√©quence: 2.0,
                dur√©e: 2000 // ms
            },
            gr√™le: { 
                diam√®tre: 10, 
                vitesse: 20,
                densit√©: 50,
                couleur: { r: 255, g: 255, b: 255, a: 1.0 },
                fr√©quence: 0.8,
                dur√©e: 1000 // ms
            },
            neige_fondue: { 
                diam√®tre: 3, 
                vitesse: 3,
                densit√©: 300,
                couleur: { r: 240, g: 240, b: 255, a: 0.7 },
                fr√©quence: 0.3,
                dur√©e: 20000 // ms
            }
        };
        
        // PROPRI√âT√âS ATMOSPH√âRIQUES
        this.constantesPhysiques = {
            g: 9.81, // m/s¬≤ (gravit√©)
            œÅ_air: 1.225, // kg/m¬≥ (densit√© air)
            œÅ_eau: 1000, // kg/m¬≥ (densit√© eau)
            Œº_air: 1.81e-5, // Pa¬∑s (viscosit√© air)
            Œ≥_eau: 0.0728, // N/m (tension superficielle)
            R: 287, // J/kg¬∑K (constante gaz air)
            Cp: 1005, // J/kg¬∑K (chaleur sp√©cifique air)
            Lv: 2.45e6 // J/kg (chaleur latente vaporisation)
        };
        
        // MOD√àLES ATMOSPH√âRIQUES
        this.profilVent = [];
        this.champTurbulence = [];
        this.gradientTemp√©rature = [];
        this.distributionHumidit√© = [];
    }

    initialize(canvas, element) {
        // Canvas pour gouttes de pluie
        this.canvasGouttes = document.createElement('canvas');
        this.canvasGouttes.width = canvas.width;
        this.canvasGouttes.height = canvas.height;
        this.ctxGouttes = this.canvasGouttes.getContext('2d');
        
        // Canvas pour √©claboussures
        this.canvas√âclaboussures = document.createElement('canvas');
        this.canvas√âclaboussures.width = canvas.width;
        this.canvas√âclaboussures.height = canvas.height;
        this.ctx√âclaboussures = this.canvas√âclaboussures.getContext('2d');
        
        // Canvas pour ondulations
        this.canvasOndulations = document.createElement('canvas');
        this.canvasOndulations.width = canvas.width;
        this.canvasOndulations.height = canvas.height;
        this.ctxOndulations = this.canvasOndulations.getContext('2d');
        
        // Canvas pour effets de vent
        this.canvasVent = document.createElement('canvas');
        this.canvasVent.width = canvas.width;
        this.canvasVent.height = canvas.height;
        this.ctxVent = this.canvasVent.getContext('2d');
        
        // Initialisation du syst√®me m√©t√©orologique
        this.initSyst√®meM√©t√©orologique(element);
        
        // Initialisation des gouttes
        this.initGouttesPluie(element);
        
        // Initialisation des surfaces
        this.initSurfacesImpact(element);
        
        // Initialisation du vent
        this.initVentAtmosph√©rique(element);
        
        // Initialisation des ondulations
        this.initOndulationsSurface(element);
        
        // Ajustement selon l'√©l√©ment
        this.ajusterParam√®tresM√©t√©orologiques(element);
    }

    initSyst√®meM√©t√©orologique(element) {
        // Configuration m√©t√©orologique bas√©e sur les param√®tres
        this.tauxPr√©cipitation = 1 + this.parameters.intensit√©.value * 49; // 1-50 mm/h
        this.diam√®treGouttes = 0.5 + this.parameters.taille.value * 4.5; // 0.5-5 mm
        this.directionVent = this.parameters.direction.value; // 0-360¬∞
        this.vitesseVent = this.parameters.vitesse.value; // 0-20 m/s
        this.niveauTurbulence = this.parameters.turbulence.value; // 0-1
        this.temp√©ratureAir = this.parameters.temp√©rature.value; // -10 √† 40¬∞C
        
        // S√©lection du type de pr√©cipitation selon l'intensit√©
        this.s√©lectionnerTypePr√©cipitation();
        
        // Calcul des propri√©t√©s atmosph√©riques
        this.calculerPropri√©t√©sAtmosph√©riques();
        
        // Initialisation du profil de vent
        this.initProfilVent();
    }

    s√©lectionnerTypePr√©cipitation() {
        const typesDisponibles = Object.keys(this.biblioth√®quePr√©cipitations);
        let typeChoisi;
        
        if (this.tauxPr√©cipitation < 2) {
            typeChoisi = 'bruine';
        } else if (this.tauxPr√©cipitation < 10) {
            typeChoisi = 'pluie_mod√©r√©e';
        } else if (this.tauxPr√©cipitation < 30) {
            typeChoisi = 'averse_intense';
        } else {
            typeChoisi = 'orage_violent';
        }
        
        // Modification selon la temp√©rature
        if (this.temp√©ratureAir < 2) {
            typeChoisi = 'neige_fondue';
        } else if (this.temp√©ratureAir < 0) {
            typeChoisi = 'gr√™le';
        }
        
        this.typePr√©cipitation = typeChoisi;
        const pr√©cipitationConfig = this.biblioth√®quePr√©cipitations[typeChoisi];
        
        this.diam√®treGouttes = pr√©cipitationConfig.diam√®tre * this.parameters.taille.value;
        this.couleurPr√©cipitation = pr√©cipitationConfig.couleur;
    }

    calculerPropri√©t√©sAtmosph√©riques() {
        // Calcul de la pression de vapeur saturante (√©quation de Clausius-Clapeyron)
        const T = this.temp√©ratureAir + 273.15; // K
        const es = 611.2 * Math.exp(17.67 * this.temp√©ratureAir / (this.temp√©ratureAir + 243.5)); // Pa
        
        this.pressionVapeur = (this.humidit√©Relative / 100) * es;
        
        // Calcul du point de ros√©e
        const ln_e_es = Math.log(this.pressionVapeur / 611.2);
        this.pointRos√©e = 243.5 * ln_e_es / (17.67 - ln_e_es);
        
        // Densit√© de l'air (loi des gaz parfaits)
        this.constantesPhysiques.œÅ_air = this.pressionAtmosph√©rique * 100 / (this.constantesPhysiques.R * T);
        
        // Viscosit√© de l'air (loi de Sutherland)
        const T0 = 273.15; // K
        const Œº0 = 1.716e-5; // Pa¬∑s
        const S = 110.4; // K
        this.constantesPhysiques.Œº_air = Œº0 * Math.pow(T / T0, 1.5) * (T0 + S) / (T + S);
    }

    initProfilVent() {
        this.profilVent = [];
        const nombreCouches = 20;
        
        for (let i = 0; i < nombreCouches; i++) {
            const altitude = (i / (nombreCouches - 1)) * 1000; // 0-1000m
            
            // Profil logarithmique du vent
            const z0 = 0.1; // m (rugosit√© surface)
            const vitesseAltitude = this.vitesseVent * Math.log((altitude + z0) / z0) / Math.log(10 / z0);
            
            // Direction avec cisaillement (effet Ekman)
            const directionAltitude = this.directionVent + altitude * 0.01 * this.niveauTurbulence;
            
            this.profilVent.push({
                altitude: altitude,
                vitesse: vitesseAltitude,
                direction: directionAltitude,
                turbulence: this.niveauTurbulence * Math.exp(-altitude / 500), // D√©croissance exponentielle
                temp√©rature: this.temp√©ratureAir - 0.0065 * altitude, // Gradient adiabatique
                pression: this.pressionAtmosph√©rique * Math.exp(-altitude / 8400) // Formule barom√©trique
            });
        }
    }

    initGouttesPluie(element) {
        this.gouttesPluie = [];
        this.distributionTailles = [];
        
        // Distribution Marshall-Palmer des tailles de gouttes
        this.g√©n√©rerDistributionMarshallPalmer();
        
        // G√©n√©ration initiale de gouttes
        this.g√©n√©rerGouttesPluieInitiales(element);
    }

    g√©n√©rerDistributionMarshallPalmer() {
        // N(D) = N0 * exp(-Œõ*D) o√π N0 et Œõ d√©pendent du taux de pr√©cipitation
        const R = this.tauxPr√©cipitation; // mm/h
        const N0 = 8000; // m‚Åª¬≥mm‚Åª¬π
        const Œõ = 4.1 * Math.pow(R, -0.21); // mm‚Åª¬π
        
        this.distributionTailles = [];
        for (let D = 0.1; D <= 8; D += 0.1) { // Diam√®tres 0.1 √† 8 mm
            const concentration = N0 * Math.exp(-Œõ * D);
            this.distributionTailles.push({
                diam√®tre: D,
                concentration: concentration,
                probabilit√©: concentration / N0 // Normalis√©e
            });
        }
    }

    g√©n√©rerGouttesPluieInitiales(element) {
        const nombreGouttes = Math.floor(100 + this.tauxPr√©cipitation * 10);
        
        for (let i = 0; i < nombreGouttes; i++) {
            const goutte = {
                id: i,
                x: Math.random() * element.width,
                y: -Math.random() * 100, // Commencent au-dessus
                z: Math.random() * 100, // Profondeur pour effet 3D
                vx: 0,
                vy: 0,
                vz: 0,
                diam√®tre: this.√©chantillonnerTailleGoutte(),
                masse: 0,
                vitesseTerminale: 0,
                coefficientTra√Æn√©e: 0,
                nombreReynolds: 0,
                √¢ge: 0,
                vie: 1.0,
                type: this.typePr√©cipitation,
                trajectoire: [],
                √©vaporation: false,
                coalescence: false,
                rotation: Math.random() * 2 * Math.PI,
                vitesseRotation: (Math.random() - 0.5) * 0.1
            };
            
            // Calcul des propri√©t√©s physiques
            this.calculerPropri√©t√©sGoutte(goutte);
            
            this.gouttesPluie.push(goutte);
        }
    }

    √©chantillonnerTailleGoutte() {
        // √âchantillonnage selon distribution Marshall-Palmer
        const rand = Math.random();
        let cumul√©e = 0;
        
        for (const taille of this.distributionTailles) {
            cumul√©e += taille.probabilit√©;
            if (rand < cumul√©e) {
                return taille.diam√®tre;
            }
        }
        
        return this.diam√®treGouttes; // Valeur par d√©faut
    }

    calculerPropri√©t√©sGoutte(goutte) {
        // Masse de la goutte (sph√®re)
        const rayon = goutte.diam√®tre * 0.0005; // m
        goutte.masse = (4/3) * Math.PI * Math.pow(rayon, 3) * this.constantesPhysiques.œÅ_eau;
        
        // Vitesse terminale (√©quation empirique)
        const D_mm = goutte.diam√®tre;
        if (D_mm < 0.5) {
            // R√©gime de Stokes
            goutte.vitesseTerminale = (this.constantesPhysiques.œÅ_eau * this.constantesPhysiques.g * Math.pow(rayon, 2)) / 
                                     (18 * this.constantesPhysiques.Œº_air);
        } else {
            // R√©gime interm√©diaire/turbulent
            goutte.vitesseTerminale = 9.65 - 10.3 * Math.exp(-0.6 * D_mm);
        }
        
        // Nombre de Reynolds
        goutte.nombreReynolds = (this.constantesPhysiques.œÅ_air * goutte.vitesseTerminale * goutte.diam√®tre * 0.001) / 
                               this.constantesPhysiques.Œº_air;
        
        // Coefficient de tra√Æn√©e
        if (goutte.nombreReynolds < 0.1) {
            goutte.coefficientTra√Æn√©e = 24 / goutte.nombreReynolds; // Stokes
        } else if (goutte.nombreReynolds < 1000) {
            goutte.coefficientTra√Æn√©e = 24 / goutte.nombreReynolds * (1 + 0.15 * Math.pow(goutte.nombreReynolds, 0.687));
        } else {
            goutte.coefficientTra√Æn√©e = 0.44; // R√©gime turbulent
        }
    }

    initSurfacesImpact(element) {
        this.surfacesImpact = [];
        this.zones√âclaboussures = [];
        
        // Surfaces horizontales (sol, toits, etc.)
        this.surfacesImpact.push({
            type: 'horizontale',
            y: element.height * 0.9, // 90% de la hauteur
            largeur: element.width,
            mat√©riau: 'b√©ton',
            rugosit√©: 0.1,
            absorption: 0.3,
            r√©flectivit√©: 0.7
        });
        
        // Surfaces d'eau
        this.surfacesImpact.push({
            type: 'eau',
            y: element.height * 0.95,
            largeur: element.width * 0.6,
            x: element.width * 0.2,
            profondeur: 10,
            viscosit√©: 0.001,
            tensionSuperficielle: 0.0728
        });
        
        // Initialisation des zones d'√©claboussures
        this.initZones√âclaboussures();
    }

    initZones√âclaboussures() {
        this.zones√âclaboussures = [];
        
        this.surfacesImpact.forEach((surface, index) => {
            const zone = {
                id: index,
                surface: surface,
                √©claboussures: [],
                fr√©quenceImpacts: 0,
                √©nergieAccumul√©e: 0,
                dernierImpact: 0
            };
            
            this.zones√âclaboussures.push(zone);
        });
    }

    initVentAtmosph√©rique(element) {
        // Conversion direction vent en composantes vectorielles
        const angleRad = (this.directionVent * Math.PI) / 180;
        this.ventAtmosph√©rique.x = this.vitesseVent * Math.cos(angleRad);
        this.ventAtmosph√©rique.y = this.vitesseVent * Math.sin(angleRad);
        this.ventAtmosph√©rique.z = 0;
        
        // Initialisation du champ de turbulence
        this.initChampTurbulence(element);
    }

    initChampTurbulence(element) {
        this.champTurbulence = [];
        const r√©solution = 20;
        
        for (let i = 0; i < r√©solution; i++) {
            for (let j = 0; j < r√©solution; j++) {
                const x = (i / (r√©solution - 1)) * element.width;
                const y = (j / (r√©solution - 1)) * element.height;
                
                // Turbulence bas√©e sur bruit de Perlin simplifi√©
                const turbulenceX = (Math.random() - 0.5) * this.niveauTurbulence * this.vitesseVent;
                const turbulenceY = (Math.random() - 0.5) * this.niveauTurbulence * this.vitesseVent;
                
                this.champTurbulence.push({
                    x: x,
                    y: y,
                    vx: this.ventAtmosph√©rique.x + turbulenceX,
                    vy: this.ventAtmosph√©rique.y + turbulenceY,
                    intensit√©: this.niveauTurbulence,
                    √©chelle: 50 + Math.random() * 100 // √âchelle des tourbillons
                });
            }
        }
    }

    initOndulationsSurface(element) {
        this.ondulationsSurface = [];
        
        // Recherche des surfaces d'eau
        this.surfacesImpact.forEach(surface => {
            if (surface.type === 'eau') {
                // Initialisation des ondulations pour cette surface
                for (let i = 0; i < 10; i++) {
                    const ondulation = {
                        id: i,
                        x: surface.x + Math.random() * surface.largeur,
                        y: surface.y,
                        rayon: 0,
                        vitessePropagation: Math.sqrt(this.constantesPhysiques.g * 0.01), // Ondes de gravit√©
                        amplitude: 0,
                        fr√©quence: 0,
                        amortissement: 0.02,
                        √¢ge: 0,
                        surface: surface
                    };
                    
                    this.ondulationsSurface.push(ondulation);
                }
            }
        });
    }

    ajusterParam√®tresM√©t√©orologiques(element) {
        // Ajustement selon la taille de l'√©l√©ment
        const facteurTaille = Math.min(element.width, element.height) / 500;
        
        this.tauxPr√©cipitation *= facteurTaille;
        
        // Ajustement selon la temp√©rature
        if (this.temp√©ratureAir < 0) {
            this.vitesseVent *= 1.2; // Plus de vent par temps froid
        }
        
        // Ajustement de la densit√© de gouttes selon les performances
        if (this.efficacit√©Rendu < 0.7) {
            this.gouttesPluie = this.gouttesPluie.slice(0, Math.floor(this.gouttesPluie.length * 0.7));
        }
    }

    update(deltaTime, canvas, element) {
        this.temps += deltaTime;
        
        // Mise √† jour des conditions atmosph√©riques
        this.mettre√ÄJourConditionsAtmosph√©riques(deltaTime);
        
        // Mise √† jour des gouttes de pluie
        this.mettre√ÄJourGouttesPluie(deltaTime, element);
        
        // Mise √† jour des √©claboussures
        this.mettre√ÄJour√âclaboussures(deltaTime);
        
        // Mise √† jour des ondulations
        this.mettre√ÄJourOndulationsSurface(deltaTime);
        
        // Mise √† jour du vent
        this.mettre√ÄJourVentAtmosph√©rique(deltaTime);
        
        // G√©n√©ration de nouvelles gouttes
        this.g√©n√©rerNouvellesGouttes(deltaTime, element);
        
        // Mise √† jour de la respiration atmosph√©rique
        this.respirationAtmosph√©rique = Math.sin(this.temps * 0.0005) * 0.1;
        
        // Enregistrement dans l'historique
        if (this.temps % 1000 < deltaTime) { // Chaque seconde
            this.enregistrerHistoriqueM√©t√©orologique();
        }
    }

    mettre√ÄJourConditionsAtmosph√©riques(deltaTime) {
        // Fluctuations de temp√©rature
        this.temp√©ratureAir += (Math.random() - 0.5) * 0.1;
        
        // Variations de pression
        this.pressionAtmosph√©rique += (Math.random() - 0.5) * 0.5;
        
        // Oscillations d'humidit√©
        this.humidit√©Relative += (Math.random() - 0.5) * 2;
        this.humidit√©Relative = Math.max(0, Math.min(100, this.humidit√©Relative));
        
        // Recalcul des propri√©t√©s atmosph√©riques
        this.calculerPropri√©t√©sAtmosph√©riques();
        
        // Mise √† jour de l'entropie m√©t√©orologique
        this.calculerEntropieM√©t√©orologique();
    }

    calculerEntropieM√©t√©orologique() {
        // Entropie bas√©e sur la distribution des vitesses des gouttes
        let entropie = 0;
        const nombreBins = 10;
        const bins = new Array(nombreBins).fill(0);
        
        // Classification des gouttes par vitesse
        this.gouttesPluie.forEach(goutte => {
            const vitesse = Math.sqrt(goutte.vx * goutte.vx + goutte.vy * goutte.vy);
            const bin = Math.min(nombreBins - 1, Math.floor((vitesse / 20) * nombreBins));
            bins[bin]++;
        });
        
        // Calcul de l'entropie de Shannon
        const total = this.gouttesPluie.length;
        bins.forEach(count => {
            if (count > 0) {
                const probabilit√© = count / total;
                entropie -= probabilit√© * Math.log2(probabilit√©);
            }
        });
        
        this.entropieM√©t√©orologique = entropie;
    }

    mettre√ÄJourGouttesPluie(deltaTime, element) {
        this.gouttesPluie.forEach((goutte, index) => {
            // Vieillissement
            goutte.√¢ge += deltaTime;
            
            // Forces appliqu√©es
            const forces = this.calculerForcesGoutte(goutte);
            
            // Int√©gration du mouvement (Verlet)
            const dt = deltaTime * 0.001; // Conversion en secondes
            
            goutte.vx += forces.x * dt / goutte.masse;
            goutte.vy += forces.y * dt / goutte.masse;
            
            // Mise √† jour de la position
            goutte.x += goutte.vx * dt;
            goutte.y += goutte.vy * dt;
            
            // Rotation de la goutte
            goutte.rotation += goutte.vitesseRotation * dt;
            
            // Ajout √† la trajectoire
            goutte.trajectoire.push({ x: goutte.x, y: goutte.y, temps: this.temps });
            if (goutte.trajectoire.length > 10) {
                goutte.trajectoire.shift();
            }
            
            // √âvaporation
            this.traiter√âvaporationGoutte(goutte, deltaTime);
            
            // V√©rification des impacts
            this.v√©rifierImpactsGoutte(goutte, index);
            
            // Suppression si sortie de l'√©cran
            if (goutte.y > element.height + 50 || goutte.x < -50 || goutte.x > element.width + 50) {
                this.gouttesPluie.splice(index, 1);
            }
        });
        
        // Traitement de la coalescence
        this.traiterCoalescenceGouttes();
    }

    calculerForcesGoutte(goutte) {
        const forces = { x: 0, y: 0 };
        
        // Force gravitationnelle
        forces.y += goutte.masse * this.constantesPhysiques.g;
        
        // Force de tra√Æn√©e a√©rodynamique
        const vitesse = Math.sqrt(goutte.vx * goutte.vx + goutte.vy * goutte.vy);
        const aire = Math.PI * Math.pow(goutte.diam√®tre * 0.0005, 2); // m¬≤
        
        const forceTra√Æn√©e = 0.5 * this.constantesPhysiques.œÅ_air * vitesse * vitesse * 
                            goutte.coefficientTra√Æn√©e * aire;
        
        if (vitesse > 0) {
            forces.x -= forceTra√Æn√©e * (goutte.vx / vitesse);
            forces.y -= forceTra√Æn√©e * (goutte.vy / vitesse);
        }
        
        // Force du vent (interpolation du champ de turbulence)
        const ventLocal = this.interpolerVentLocal(goutte.x, goutte.y);
        const forceVent = 0.1 * this.constantesPhysiques.œÅ_air * aire;
        
        forces.x += forceVent * ventLocal.vx;
        forces.y += forceVent * ventLocal.vy;
        
        // Effet Magnus (rotation de la goutte)
        const forceMagnus = 0.5 * this.constantesPhysiques.œÅ_air * vitesse * 
                           goutte.vitesseRotation * Math.pow(goutte.diam√®tre * 0.0005, 3);
        
        forces.x += forceMagnus * (-goutte.vy / (vitesse + 0.001));
        forces.y += forceMagnus * (goutte.vx / (vitesse + 0.001));
        
        return forces;
    }

    interpolerVentLocal(x, y) {
        // Interpolation bilin√©aire du champ de turbulence
        const r√©solution = Math.sqrt(this.champTurbulence.length);
        const i = Math.floor((x / 500) * (r√©solution - 1));
        const j = Math.floor((y / 500) * (r√©solution - 1));
        
        const index = Math.min(this.champTurbulence.length - 1, j * r√©solution + i);
        
        if (index >= 0 && index < this.champTurbulence.length) {
            return this.champTurbulence[index];
        }
        
        return { vx: this.ventAtmosph√©rique.x, vy: this.ventAtmosph√©rique.y };
    }

    traiter√âvaporationGoutte(goutte, deltaTime) {
        // Taux d'√©vaporation selon √©quation de diffusion
        const d√©ficitVapeur = this.calculerD√©ficitVapeur();
        const coefficientDiffusion = 2.11e-5; // m¬≤/s (vapeur d'eau dans l'air)
        
        const taux√âvaporation = 4 * Math.PI * (goutte.diam√®tre * 0.0005) * 
                               coefficientDiffusion * d√©ficitVapeur;
        
        const perteMasse = taux√âvaporation * deltaTime * 0.001;
        goutte.masse = Math.max(0, goutte.masse - perteMasse);
        
        // Recalcul du diam√®tre
        if (goutte.masse > 0) {
            const volume = goutte.masse / this.constantesPhysiques.œÅ_eau;
            goutte.diam√®tre = 2 * Math.pow(3 * volume / (4 * Math.PI), 1/3) * 1000; // mm
        } else {
            goutte.√©vaporation = true;
        }
    }

    calculerD√©ficitVapeur() {
        // D√©ficit de vapeur = pression saturante - pression actuelle
        const T = this.temp√©ratureAir + 273.15;
        const es = 611.2 * Math.exp(17.67 * this.temp√©ratureAir / (this.temp√©ratureAir + 243.5));
        return (es - this.pressionVapeur) / (this.constantesPhysiques.R * T);
    }

    v√©rifierImpactsGoutte(goutte, index) {
        this.surfacesImpact.forEach((surface, surfaceIndex) => {
            let impact = false;
            
            if (surface.type === 'horizontale' && goutte.y >= surface.y) {
                impact = true;
            } else if (surface.type === 'eau' && 
                      goutte.y >= surface.y && 
                      goutte.x >= surface.x && 
                      goutte.x <= surface.x + surface.largeur) {
                impact = true;
            }
            
            if (impact) {
                // Cr√©ation d'une √©claboussure
                this.cr√©er√âclaboussure(goutte, surface, surfaceIndex);
                
                // Cr√©ation d'ondulations si surface d'eau
                if (surface.type === 'eau') {
                    this.cr√©erOndulation(goutte, surface);
                }
                
                // Suppression de la goutte
                this.gouttesPluie.splice(index, 1);
            }
        });
    }

    cr√©er√âclaboussure(goutte, surface, surfaceIndex) {
        const √©nergieImpact = 0.5 * goutte.masse * 
                             (goutte.vx * goutte.vx + goutte.vy * goutte.vy);
        
        const √©claboussure = {
            id: this.√©claboussures.length,
            x: goutte.x,
            y: surface.y,
            √©nergieInitiale: √©nergieImpact,
            nombreGouttelettes: Math.floor(5 + √©nergieImpact * 1000),
            gouttelettes: [],
            √¢ge: 0,
            dur√©eVie: 500 + √©nergieImpact * 1000, // ms
            surface: surface
        };
        
        // G√©n√©ration des gouttelettes d'√©claboussure
        for (let i = 0; i < √©claboussure.nombreGouttelettes; i++) {
            const angle = Math.random() * 2 * Math.PI;
            const vitesse = Math.sqrt(2 * √©nergieImpact / goutte.masse) * (0.5 + Math.random() * 0.5);
            
            √©claboussure.gouttelettes.push({
                x: √©claboussure.x,
                y: √©claboussure.y,
                vx: vitesse * Math.cos(angle),
                vy: -Math.abs(vitesse * Math.sin(angle)), // Vers le haut
                diam√®tre: goutte.diam√®tre * (0.1 + Math.random() * 0.3),
                vie: 1.0,
                √¢ge: 0
            });
        }
        
        this.√©claboussures.push(√©claboussure);
        
        // Mise √† jour de la zone d'√©claboussures
        if (surfaceIndex < this.zones√âclaboussures.length) {
            this.zones√âclaboussures[surfaceIndex].fr√©quenceImpacts++;
            this.zones√âclaboussures[surfaceIndex].√©nergieAccumul√©e += √©nergieImpact;
            this.zones√âclaboussures[surfaceIndex].dernierImpact = this.temps;
        }
    }

    cr√©erOndulation(goutte, surface) {
        const √©nergieImpact = 0.5 * goutte.masse * 
                             (goutte.vx * goutte.vx + goutte.vy * goutte.vy);
        
        const ondulation = {
            id: this.ondulationsSurface.length,
            x: goutte.x,
            y: surface.y,
            rayon: 0,
            vitessePropagation: Math.sqrt(this.constantesPhysiques.g * surface.profondeur * 0.001),
            amplitude: Math.sqrt(√©nergieImpact) * 10, // mm
            fr√©quence: 1 / (2 * Math.PI * Math.sqrt(surface.profondeur * 0.001 / this.constantesPhysiques.g)),
            amortissement: 0.01,
            √¢ge: 0,
            surface: surface
        };
        
        this.ondulationsSurface.push(ondulation);
    }

    traiterCoalescenceGouttes() {
        for (let i = 0; i < this.gouttesPluie.length; i++) {
            for (let j = i + 1; j < this.gouttesPluie.length; j++) {
                const goutte1 = this.gouttesPluie[i];
                const goutte2 = this.gouttesPluie[j];
                
                const distance = Math.sqrt(
                    Math.pow(goutte1.x - goutte2.x, 2) + 
                    Math.pow(goutte1.y - goutte2.y, 2)
                );
                
                const rayonTotal = (goutte1.diam√®tre + goutte2.diam√®tre) * 0.0005; // m
                
                if (distance < rayonTotal) {
                    // Coalescence : conservation de la masse et de la quantit√© de mouvement
                    const masseTotal = goutte1.masse + goutte2.masse;
                    const vxFinal = (goutte1.masse * goutte1.vx + goutte2.masse * goutte2.vx) / masseTotal;
                    const vyFinal = (goutte1.masse * goutte1.vy + goutte2.masse * goutte2.vy) / masseTotal;
                    
                    // Nouveau diam√®tre (conservation du volume)
                    const volumeTotal = (goutte1.masse + goutte2.masse) / this.constantesPhysiques.œÅ_eau;
                    const nouveauDiam√®tre = 2 * Math.pow(3 * volumeTotal / (4 * Math.PI), 1/3) * 1000; // mm
                    
                    // Mise √† jour de la premi√®re goutte
                    goutte1.masse = masseTotal;
                    goutte1.diam√®tre = nouveauDiam√®tre;
                    goutte1.vx = vxFinal;
                    goutte1.vy = vyFinal;
                    goutte1.x = (goutte1.x + goutte2.x) / 2;
                    goutte1.y = (goutte1.y + goutte2.y) / 2;
                    
                    // Recalcul des propri√©t√©s
                    this.calculerPropri√©t√©sGoutte(goutte1);
                    
                    // Suppression de la deuxi√®me goutte
                    this.gouttesPluie.splice(j, 1);
                    j--;
                }
            }
        }
    }

    mettre√ÄJour√âclaboussures(deltaTime) {
        this.√©claboussures.forEach((√©claboussure, index) => {
            √©claboussure.√¢ge += deltaTime;
            
            if (√©claboussure.√¢ge > √©claboussure.dur√©eVie) {
                this.√©claboussures.splice(index, 1);
                return;
            }
            
            // Mise √† jour des gouttelettes
            √©claboussure.gouttelettes.forEach(gouttelette => {
                gouttelette.√¢ge += deltaTime;
                gouttelette.vie = Math.max(0, 1 - gouttelette.√¢ge / √©claboussure.dur√©eVie);
                
                // Mouvement balistique
                const dt = deltaTime * 0.001;
                gouttelette.x += gouttelette.vx * dt;
                gouttelette.y += gouttelette.vy * dt;
                gouttelette.vy += this.constantesPhysiques.g * dt; // Gravit√©
                
                // R√©sistance de l'air
                gouttelette.vx *= 0.99;
                gouttelette.vy *= 0.99;
            });
        });
    }

    mettre√ÄJourOndulationsSurface(deltaTime) {
        this.ondulationsSurface.forEach((ondulation, index) => {
            ondulation.√¢ge += deltaTime;
            
            // Propagation de l'ondulation
            ondulation.rayon += ondulation.vitessePropagation * deltaTime * 0.001;
            
            // Amortissement
            ondulation.amplitude *= (1 - ondulation.amortissement);
            
            // Suppression si amplitude trop faible
            if (ondulation.amplitude < 0.1) {
                this.ondulationsSurface.splice(index, 1);
            }
        });
    }

    mettre√ÄJourVentAtmosph√©rique(deltaTime) {
        // Fluctuations du vent
        this.vitesseVent += (Math.random() - 0.5) * 0.1;
        this.vitesseVent = Math.max(0, this.vitesseVent);
        
        this.directionVent += (Math.random() - 0.5) * 2;
        this.directionVent = ((this.directionVent % 360) + 360) % 360;
        
        // Mise √† jour des composantes vectorielles
        const angleRad = (this.directionVent * Math.PI) / 180;
        this.ventAtmosph√©rique.x = this.vitesseVent * Math.cos(angleRad);
        this.ventAtmosph√©rique.y = this.vitesseVent * Math.sin(angleRad);
        
        // Mise √† jour du champ de turbulence
        this.champTurbulence.forEach(point => {
            point.vx = this.ventAtmosph√©rique.x + (Math.random() - 0.5) * this.niveauTurbulence * this.vitesseVent;
            point.vy = this.ventAtmosph√©rique.y + (Math.random() - 0.5) * this.niveauTurbulence * this.vitesseVent;
        });
    }

    g√©n√©rerNouvellesGouttes(deltaTime, element) {
        // Fr√©quence de g√©n√©ration bas√©e sur le taux de pr√©cipitation
        const fr√©quenceG√©n√©ration = this.tauxPr√©cipitation / 10; // gouttes/ms
        const nombreNouvellesGouttes = Math.floor(fr√©quenceG√©n√©ration * deltaTime);
        
        for (let i = 0; i < nombreNouvellesGouttes; i++) {
            if (this.gouttesPluie.length < 1000) { // Limite pour les performances
                const nouvelleGoutte = {
                    id: this.gouttesPluie.length,
                    x: Math.random() * element.width,
                    y: -Math.random() * 50,
                    z: Math.random() * 100,
                    vx: 0,
                    vy: 0,
                    vz: 0,
                    diam√®tre: this.√©chantillonnerTailleGoutte(),
                    masse: 0,
                    vitesseTerminale: 0,
                    coefficientTra√Æn√©e: 0,
                    nombreReynolds: 0,
                    √¢ge: 0,
                    vie: 1.0,
                    type: this.typePr√©cipitation,
                    trajectoire: [],
                    √©vaporation: false,
                    coalescence: false,
                    rotation: Math.random() * 2 * Math.PI,
                    vitesseRotation: (Math.random() - 0.5) * 0.1
                };
                
                this.calculerPropri√©t√©sGoutte(nouvelleGoutte);
                this.gouttesPluie.push(nouvelleGoutte);
            }
        }
    }

    enregistrerHistoriqueM√©t√©orologique() {
        const goutteActives = this.gouttesPluie.filter(g => g.vie > 0).length;
        
        this.historiqueM√©t√©orologique.push({
            temps: this.temps,
            tauxPr√©cipitation: this.tauxPr√©cipitation,
            temp√©ratureAir: this.temp√©ratureAir,
            vitesseVent: this.vitesseVent,
            directionVent: this.directionVent,
            niveauTurbulence: this.niveauTurbulence,
            goutteActives: goutteActives,
            nombre√âclaboussures: this.√©claboussures.length,
            nombreOndulations: this.ondulationsSurface.length,
            entropieM√©t√©orologique: this.entropieM√©t√©orologique,
            efficacit√©Rendu: this.efficacit√©Rendu
        });
        
        // Limitation de l'historique
        if (this.historiqueM√©t√©orologique.length > 30) {
            this.historiqueM√©t√©orologique.shift();
        }
        
        // Adaptation des param√®tres
        this.adapterParam√®tresSelonHistorique();
    }

    adapterParam√®tresSelonHistorique() {
        if (this.historiqueM√©t√©orologique.length < 5) return;
        
        // Analyse des tendances
        const moyenneEfficacit√© = this.historiqueM√©t√©orologique.reduce((sum, h) => 
            sum + h.efficacit√©Rendu, 0) / this.historiqueM√©t√©orologique.length;
        
        // Adaptation du taux de pr√©cipitation si l'efficacit√© est faible
        if (moyenneEfficacit√© < 0.6) {
            this.tauxPr√©cipitation *= 0.9; // R√©duction de 10%
        } else if (moyenneEfficacit√© > 0.9) {
            this.tauxPr√©cipitation *= 1.05; // Augmentation de 5%
        }
        
        // Adaptation du nombre de gouttes selon les performances
        const moyenneGouttes = this.historiqueM√©t√©orologique.reduce((sum, h) => 
            sum + h.goutteActives, 0) / this.historiqueM√©t√©orologique.length;
        
        if (moyenneGouttes > 500 && moyenneEfficacit√© < 0.7) {
            // R√©duction du nombre de gouttes pour am√©liorer les performances
            this.gouttesPluie = this.gouttesPluie.slice(0, Math.floor(this.gouttesPluie.length * 0.8));
        }
    }

    render(ctx, canvas, element) {
        // Nettoyage des canvas
        this.ctxGouttes.clearRect(0, 0, this.canvasGouttes.width, this.canvasGouttes.height);
        this.ctx√âclaboussures.clearRect(0, 0, this.canvas√âclaboussures.width, this.canvas√âclaboussures.height);
        this.ctxOndulations.clearRect(0, 0, this.canvasOndulations.width, this.canvasOndulations.height);
        this.ctxVent.clearRect(0, 0, this.canvasVent.width, this.canvasVent.height);
        
        // Rendu des diff√©rentes couches
        this.rendreGouttesPluie();
        this.rendre√âclaboussures();
        this.rendreOndulationsSurface();
        this.rendreEffetsVent();
        
        // Composition finale
        ctx.save();
        
        // Rendu des effets de vent (fond)
        ctx.globalAlpha = 0.2 * this.niveauTurbulence;
        ctx.drawImage(this.canvasVent, 0, 0);
        
        // Rendu des ondulations
        ctx.globalAlpha = 0.6;
        ctx.drawImage(this.canvasOndulations, 0, 0);
        
        // Rendu des gouttes de pluie
        ctx.globalAlpha = this.couleurPr√©cipitation.a;
        ctx.drawImage(this.canvasGouttes, 0, 0);
        
        // Rendu des √©claboussures
        ctx.globalAlpha = 0.8;
        ctx.drawImage(this.canvas√âclaboussures, 0, 0);
        
        ctx.restore();
    }

    rendreGouttesPluie() {
        this.ctxGouttes.save();
        
        this.gouttesPluie.forEach(goutte => {
            if (goutte.vie <= 0) return;
            
            const couleur = this.couleurPr√©cipitation;
            const alpha = couleur.a * goutte.vie;
            
            // Rendu de la trajectoire
            if (goutte.trajectoire.length > 1) {
                this.ctxGouttes.strokeStyle = `rgba(${couleur.r}, ${couleur.g}, ${couleur.b}, ${alpha * 0.3})`;
                this.ctxGouttes.lineWidth = Math.max(1, goutte.diam√®tre * 0.2);
                this.ctxGouttes.lineCap = 'round';
                this.ctxGouttes.beginPath();
                
                goutte.trajectoire.forEach((point, index) => {
                    if (index === 0) {
                        this.ctxGouttes.moveTo(point.x, point.y);
                    } else {
                        this.ctxGouttes.lineTo(point.x, point.y);
                    }
                });
                
                this.ctxGouttes.stroke();
            }
            
            // Rendu de la goutte
            this.ctxGouttes.save();
            this.ctxGouttes.translate(goutte.x, goutte.y);
            this.ctxGouttes.rotate(goutte.rotation);
            
            // Forme de la goutte (ellipse d√©form√©e par la vitesse)
            const vitesse = Math.sqrt(goutte.vx * goutte.vx + goutte.vy * goutte.vy);
            const facteurD√©formation = 1 + vitesse * 0.1;
            
            const gradient = this.ctxGouttes.createRadialGradient(
                0, -goutte.diam√®tre * 0.2, 0,
                0, 0, goutte.diam√®tre
            );
            gradient.addColorStop(0, `rgba(${couleur.r + 50}, ${couleur.g + 50}, ${couleur.b + 50}, ${alpha})`);
            gradient.addColorStop(1, `rgba(${couleur.r}, ${couleur.g}, ${couleur.b}, ${alpha * 0.6})`);
            
            this.ctxGouttes.fillStyle = gradient;
            this.ctxGouttes.beginPath();
            this.ctxGouttes.ellipse(0, 0, goutte.diam√®tre, goutte.diam√®tre * facteurD√©formation, 0, 0, 2 * Math.PI);
            this.ctxGouttes.fill();
            
            // Reflet sur la goutte
            this.ctxGouttes.fillStyle = `rgba(255, 255, 255, ${alpha * 0.4})`;
            this.ctxGouttes.beginPath();
            this.ctxGouttes.ellipse(-goutte.diam√®tre * 0.3, -goutte.diam√®tre * 0.3, 
                                   goutte.diam√®tre * 0.2, goutte.diam√®tre * 0.3, 0, 0, 2 * Math.PI);
            this.ctxGouttes.fill();
            
            this.ctxGouttes.restore();
        });
        
        this.ctxGouttes.restore();
    }

    rendre√âclaboussures() {
        this.ctx√âclaboussures.save();
        
        this.√©claboussures.forEach(√©claboussure => {
            const facteurVie = 1 - √©claboussure.√¢ge / √©claboussure.dur√©eVie;
            
            √©claboussure.gouttelettes.forEach(gouttelette => {
                if (gouttelette.vie <= 0) return;
                
                const couleur = this.couleurPr√©cipitation;
                const alpha = couleur.a * gouttelette.vie * facteurVie;
                
                // Rendu de la gouttelette d'√©claboussure
                const gradient = this.ctx√âclaboussures.createRadialGradient(
                    gouttelette.x, gouttelette.y, 0,
                    gouttelette.x, gouttelette.y, gouttelette.diam√®tre
                );
                gradient.addColorStop(0, `rgba(${couleur.r + 30}, ${couleur.g + 30}, ${couleur.b + 30}, ${alpha})`);
                gradient.addColorStop(1, `rgba(${couleur.r}, ${couleur.g}, ${couleur.b}, 0)`);
                
                this.ctx√âclaboussures.fillStyle = gradient;
                this.ctx√âclaboussures.beginPath();
                this.ctx√âclaboussures.arc(gouttelette.x, gouttelette.y, gouttelette.diam√®tre, 0, 2 * Math.PI);
                this.ctx√âclaboussures.fill();
            });
        });
        
        this.ctx√âclaboussures.restore();
    }

    rendreOndulationsSurface() {
        this.ctxOndulations.save();
        
        this.ondulationsSurface.forEach(ondulation => {
            const alpha = Math.min(1, ondulation.amplitude / 10);
            
            this.ctxOndulations.strokeStyle = `rgba(200, 220, 255, ${alpha * 0.6})`;
            this.ctxOndulations.lineWidth = 2;
            this.ctxOndulations.beginPath();
            this.ctxOndulations.arc(ondulation.x, ondulation.y, ondulation.rayon, 0, 2 * Math.PI);
            this.ctxOndulations.stroke();
            
            // Ondulation secondaire
            if (ondulation.rayon > 10) {
                this.ctxOndulations.strokeStyle = `rgba(200, 220, 255, ${alpha * 0.3})`;
                this.ctxOndulations.lineWidth = 1;
                this.ctxOndulations.beginPath();
                this.ctxOndulations.arc(ondulation.x, ondulation.y, ondulation.rayon * 0.7, 0, 2 * Math.PI);
                this.ctxOndulations.stroke();
            }
        });
        
        this.ctxOndulations.restore();
    }

    rendreEffetsVent() {
        this.ctxVent.save();
        
        // Rendu du champ de turbulence
        this.champTurbulence.forEach(point => {
            const intensit√© = Math.sqrt(point.vx * point.vx + point.vy * point.vy);
            const alpha = Math.min(1, intensit√© / 10) * point.intensit√©;
            
            if (alpha > 0.1) {
                // Lignes de courant
                this.ctxVent.strokeStyle = `rgba(255, 255, 255, ${alpha * 0.2})`;
                this.ctxVent.lineWidth = 1;
                this.ctxVent.beginPath();
                this.ctxVent.moveTo(point.x, point.y);
                this.ctxVent.lineTo(point.x + point.vx * 5, point.y + point.vy * 5);
                this.ctxVent.stroke();
            }
        });
        
        this.ctxVent.restore();
    }

    // M√©thodes de gestion des param√®tres
    updateParameter(name, value) {
        super.updateParameter(name, value);
        
        switch (name) {
            case 'intensit√©':
                this.tauxPr√©cipitation = 1 + value * 49;
                this.s√©lectionnerTypePr√©cipitation();
                break;
            case 'taille':
                this.diam√®treGouttes = 0.5 + value * 4.5;
                this.g√©n√©rerDistributionMarshallPalmer();
                break;
            case 'direction':
                this.directionVent = value;
                this.initVentAtmosph√©rique({ width: 500, height: 500 });
                break;
            case 'vitesse':
                this.vitesseVent = value;
                this.initProfilVent();
                break;
            case 'turbulence':
                this.niveauTurbulence = value;
                this.initChampTurbulence({ width: 500, height: 500 });
                break;
            case 'temp√©rature':
                this.temp√©ratureAir = value;
                this.calculerPropri√©t√©sAtmosph√©riques();
                this.s√©lectionnerTypePr√©cipitation();
                break;
        }
    }

    // M√©thodes de nettoyage
    destroy() {
        // Nettoyage des canvas
        if (this.canvasGouttes) this.canvasGouttes.remove();
        if (this.canvas√âclaboussures) this.canvas√âclaboussures.remove();
        if (this.canvasOndulations) this.canvasOndulations.remove();
        if (this.canvasVent) this.canvasVent.remove();
        
        // Nettoyage des donn√©es
        this.gouttesPluie = [];
        this.√©claboussures = [];
        this.ondulationsSurface = [];
        this.historiqueM√©t√©orologique = [];
        
        super.destroy();
    }

    // M√©thodes d'optimisation
    optimizePerformance() {
        // R√©duction du nombre de gouttes si performance faible
        if (this.efficacit√©Rendu < 0.6) {
            const nouveauNombre = Math.floor(this.gouttesPluie.length * 0.7);
            this.gouttesPluie = this.gouttesPluie.slice(0, nouveauNombre);
        }
        
        // R√©duction de la complexit√© des √©claboussures
        if (this.efficacit√©Rendu < 0.7) {
            this.√©claboussures.forEach(√©claboussure => {
                if (√©claboussure.gouttelettes.length > 10) {
                    √©claboussure.gouttelettes = √©claboussure.gouttelettes.slice(0, 10);
                }
            });
        }
    }

    // M√©thodes d'analyse
    getPerformanceMetrics() {
        return {
            tauxPr√©cipitation: this.tauxPr√©cipitation,
            temp√©ratureAir: this.temp√©ratureAir,
            vitesseVent: this.vitesseVent,
            directionVent: this.directionVent,
            nombreGouttes: this.gouttesPluie.length,
            nombre√âclaboussures: this.√©claboussures.length,
            nombreOndulations: this.ondulationsSurface.length,
            entropieM√©t√©orologique: this.entropieM√©t√©orologique,
            efficacit√©Rendu: this.efficacit√©Rendu,
            m√©moireUtilis√©e: this.historiqueM√©t√©orologique.length
        };
    }
}

// Export de la classe pour utilisation
export default RainSimulationEffect;



// ü§ñ Am√©liorations automatiques niveau 3:

// - Optimisation des performances
// - Harmonisation des couleurs
// - Am√©lioration de la compatibilit√©
// - Adaptation intelligente utilisateur
// - Synchronisation avanc√©e des effets
// - Analyse contextuelle
// - IA pr√©dictive cr√©ative
// - Variations infinies g√©n√©r√©es
// - Style signature unique
// - Moteur de cr√©ativit√© r√©volutionnaire