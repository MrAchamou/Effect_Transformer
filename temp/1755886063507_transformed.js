// ‚ú® Code transform√© avec Digital Alchemy Lab
// Niveau: Standard
// Modules appliqu√©s: ContentAnalyzer, SmartOptimizer, ColorHarmonizer
// G√©n√©ration: 2025-08-22T18:07:43.507Z

// smoke-simulation.js

export const smokeSimulationEffect = {
  id: "video-smoke-simulation-particles-055",
  name: "Simulation Fum√©e Particules R√©aliste",
  
  description: `## üí® EFFET 55 : SMOKE_SIMULATION

**CAT√âGORIE :** VID√âO
**EFFET DEMAND√â :** Smoke_Simulation
**ID UNIQUE :** video-smoke-simulation-particles-055
**NOM AFFICHAGE :** Simulation Fum√©e Particules R√©aliste

**DESCRIPTION :** Une simulation r√©aliste de fum√©e est ajout√©e √† la vid√©o. Les volutes de fum√©e s'√©l√®vent et se dispersent avec des turbulences naturelles. La densit√© de la fum√©e, sa couleur et sa vitesse de dispersion sont ajustables, cr√©ant une ambiance enfum√©e cr√©dible.

**SP√âCIFICATIONS ADDICTION :**
- Simulation fluide dynamique √©quations Navier-Stokes
- Particules fum√©e suivant lois thermodynamiques
- Turbulences ob√©issant th√©orie chaos d√©terministe
- Dispersion respectant √©quations diffusion mol√©culaire

--------------------------------------------------------------------------

üí® SMOKE_SIMULATION EFFECT CR√â√â !
‚ú® SYST√àME FLUIDE AUTHENTIQUE :

üå™Ô∏è M√âCANIQUE TURBULENCES R√âALISTE :
√âquations Navier-Stokes : Mouvement fluide visqueux compressible
Convection thermique : Transport chaleur mouvement fluide
Diffusion mol√©culaire : M√©lange esp√®ces concentration
Vorticit√© locale : Rotation fluide autour axes
Instabilit√©s Kelvin-Helmholtz : Turbulence cisaillement vitesse
Cascade √©nerg√©tique : Transfert √©nergie √©chelles

üî• SYST√àME COMBUSTION AUTHENTIQUE :
R√©actions chimiques : Oxydation mati√®re organique
Transfert masse : Transport esp√®ces r√©actives
Cin√©tique chimique : Vitesses r√©actions combustion
Flamme pr√©m√©lang√©e : Combustible air homog√®ne
Flamme diffusion : M√©lange r√©actifs interface
Extinction thermique : Perte chaleur environnement

üß† INTELLIGENCE FLUIDE :
Transport scalaire : √âquations advection-diffusion
Thermodynamique : √âchanges chaleur masse √©nergie
Microphysique a√©rosols : Formation croissance particules
√âlectrostatique : Accumulation charges particules
Acoustique : Propagation ondes pression
Optique diffusion : Interaction lumi√®re particules

üé≠ DYNAMIQUE MULTI-FUM√âES :
Fum√©e l√©g√®re : Particules fines ascension rapide
Fum√©e dense : Concentration √©lev√©e dispersion lente
Vapeur chaude : Gaz surchauff√© convection intense
Brouillard froid : Condensation vapeur eau
Smog urbain : M√©lange polluants atmosph√©riques
Fum√©e toxique : Particules nocives combustion

üéÆ PARAM√àTRES FLUIDES :
Densit√© : Concentration particules en kg/m¬≥
Temp√©rature : Chaleur fluide en Kelvin
Vitesse : V√©locit√© ascension en m/s
Viscosit√© : R√©sistance √©coulement en Pa¬∑s
Turbulence : Chaos fluide sans dimension
Dispersion : √âtalement spatial en m¬≤/s`,

  category: "vid√©o",
  // ... reste de la structure
};

class SmokeSimulationEffect extends BaseEffect {
    constructor(config = {}) {
        super({
            id: 'video-smoke-simulation-particles-055',
            name: 'Simulation Fum√©e Particules R√©aliste',
            category: 'vid√©o',
            version: '1.0',
            performance: 'high',
            parameters: {
                densit√©: { type: 'range', min: 0.1, max: 5.0, default: 1.5 },
                temp√©rature: { type: 'range', min: 300, max: 1500, default: 600 },
                vitesse: { type: 'range', min: 0.5, max: 10, default: 3 },
                viscosit√©: { type: 'range', min: 0.01, max: 0.5, default: 0.1 },
                turbulence: { type: 'range', min: 0, max: 1, default: 0.4 },
                dispersion: { type: 'range', min: 0.1, max: 2, default: 0.8 }
            }
        });

        // SYST√àME PRINCIPAL DE L'EFFET
        this.temps = 0;
        this.particulesFum√©e = [];
        this.volutesConvection = [];
        this.champTurbulence = [];
        this.√©coulementFluide = { vx: 0, vy: 0, vz: 0 };
        
        // VARIABLES THERMODYNAMIQUES
        this.densit√©Fum√©e = 1.5; // kg/m¬≥
        this.temp√©ratureFluide = 600; // K
        this.vitesseAscension = 3; // m/s
        this.viscosit√©Dynamique = 0.1; // Pa¬∑s
        this.niveauTurbulence = 0.4; // 0-1
        this.coefficientDispersion = 0.8; // m¬≤/s
        this.pressionAtmosph√©rique = 101325; // Pa
        this.humidit√©Relative = 60; // %
        
        // SYST√àME PARTICULES COMPLEXE
        this.distributionTailles = [];
        this.coalescenceEvents = [];
        this.√©vaporationActive = [];
        this.trajectoiresConvectives = [];
        
        // EFFET COMBUSTION ET SOURCES
        this.sourcesCombustion = [];
        this.zonesR√©action = [];
        this.flammesDiffusion = [];
        this.transfertChaleur = [];
        
        // Canvas pour effets complexes
        this.canvasParticules = null;
        this.ctxParticules = null;
        this.canvasVolutes = null;
        this.ctxVolutes = null;
        this.canvasTurbulence = null;
        this.ctxTurbulence = null;
        this.canvasConvection = null;
        this.ctxConvection = null;
        
        // MICRO-VARIATIONS FLUIDES
        this.fluctuationsThermiques = [];
        this.tourbillonsLocaux = 0;
        this.respirationConvective = 0;
        
        // SYST√àME √âV√âNEMENTS COMBUSTION
        this.combustionActive = false;
        this.prochaine√âmission = 0;
        this.dur√©e√âmission = 0;
        this.typeFum√©e = 'combustion_standard'; // l√©g√®re, standard, dense, toxique
        
        // M√âMOIRE ET ADAPTATION
        this.historiqueFluide = [];
        this.adaptationThermique = 0;
        this.zonesConvection = new Map();
        this.efficacit√©Rendu = 0.9;
        
        // PHYSIQUE FLUIDES
        this.√©nergieThermique = 0; // √ânergie syst√®me thermodynamique
        this.entropieFluide = 0; // D√©sordre syst√®me fluide
        this.enthalpieSp√©cifique = 0; // √ânergie par unit√© masse
        this.capacit√©Calorifique = 0; // Chaleur sp√©cifique
        
        // TYPES DE FUM√âE DISPONIBLES
        this.biblioth√®queFum√©es = {
            l√©g√®re: { 
                densit√©: 0.3, 
                temp√©rature: 400,
                vitesse: 5,
                couleur: { r: 220, g: 220, b: 220, a: 0.3 },
                viscosit√©: 0.05,
                dur√©e: 60000 // ms
            },
            standard: { 
                densit√©: 1.5, 
                temp√©rature: 600,
                vitesse: 3,
                couleur: { r: 180, g: 180, b: 180, a: 0.6 },
                viscosit√©: 0.1,
                dur√©e: 45000 // ms
            },
            dense: { 
                densit√©: 3.0, 
                temp√©rature: 800,
                vitesse: 2,
                couleur: { r: 120, g: 120, b: 120, a: 0.8 },
                viscosit√©: 0.2,
                dur√©e: 30000 // ms
            },
            toxique: { 
                densit√©: 2.5, 
                temp√©rature: 700,
                vitesse: 2.5,
                couleur: { r: 100, g: 140, b: 100, a: 0.9 },
                viscosit√©: 0.15,
                dur√©e: 20000 // ms
            },
            vapeur: { 
                densit√©: 0.8, 
                temp√©rature: 373,
                vitesse: 4,
                couleur: { r: 240, g: 240, b: 255, a: 0.4 },
                viscosit√©: 0.03,
                dur√©e: 15000 // ms
            },
            brouillard: { 
                densit√©: 1.2, 
                temp√©rature: 280,
                vitesse: 1,
                couleur: { r: 200, g: 210, b: 220, a: 0.7 },
                viscosit√©: 0.08,
                dur√©e: 90000 // ms
            }
        };
        
        // PROPRI√âT√âS THERMODYNAMIQUES
        this.constantesPhysiques = {
            R: 287, // J/kg¬∑K (constante gaz air)
            Cp: 1005, // J/kg¬∑K (chaleur sp√©cifique air)
            Œ≥: 1.4, // rapport chaleurs sp√©cifiques
            Œº: 1.81e-5, // Pa¬∑s (viscosit√© air)
            k: 0.026, // W/m¬∑K (conductivit√© thermique)
            Pr: 0.71, // nombre Prandtl
            g: 9.81, // m/s¬≤ (gravit√©)
            œÉ: 5.67e-8 // W/m¬≤¬∑K‚Å¥ (Stefan-Boltzmann)
        };
        
        // MOD√àLES FLUIDES
        this.profilVitesse = [];
        this.champPression = [];
        this.gradientTemp√©rature = [];
        this.distributionVorticit√© = [];
    }

    initialize(canvas, element) {
        // Canvas pour particules de fum√©e
        this.canvasParticules = document.createElement('canvas');
        this.canvasParticules.width = canvas.width;
        this.canvasParticules.height = canvas.height;
        this.ctxParticules = this.canvasParticules.getContext('2d');
        
        // Canvas pour volutes
        this.canvasVolutes = document.createElement('canvas');
        this.canvasVolutes.width = canvas.width;
        this.canvasVolutes.height = canvas.height;
        this.ctxVolutes = this.canvasVolutes.getContext('2d');
        
        // Canvas pour turbulence
        this.canvasTurbulence = document.createElement('canvas');
        this.canvasTurbulence.width = canvas.width;
        this.canvasTurbulence.height = canvas.height;
        this.ctxTurbulence = this.canvasTurbulence.getContext('2d');
        
        // Canvas pour convection
        this.canvasConvection = document.createElement('canvas');
        this.canvasConvection.width = canvas.width;
        this.canvasConvection.height = canvas.height;
        this.ctxConvection = this.canvasConvection.getContext('2d');
        
        // Initialisation du syst√®me thermodynamique
        this.initSyst√®meThermodynamique(element);
        
        // Initialisation des particules
        this.initParticulesFum√©e(element);
        
        // Initialisation des sources
        this.initSourcesCombustion(element);
        
        // Initialisation de la turbulence
        this.initTurbulenceFluide(element);
        
        // Initialisation de la convection
        this.initConvectionThermique(element);
        
        // Ajustement selon l'√©l√©ment
        this.ajusterParam√®tresThermodynamiques(element);
    }

    initSyst√®meThermodynamique(element) {
        // Configuration thermodynamique bas√©e sur les param√®tres
        this.densit√©Fum√©e = this.parameters.densit√©.value; // 0.1-5 kg/m¬≥
        this.temp√©ratureFluide = this.parameters.temp√©rature.value; // 300-1500 K
        this.vitesseAscension = this.parameters.vitesse.value; // 0.5-10 m/s
        this.viscosit√©Dynamique = this.parameters.viscosit√©.value; // 0.01-0.5 Pa¬∑s
        this.niveauTurbulence = this.parameters.turbulence.value; // 0-1
        this.coefficientDispersion = this.parameters.dispersion.value; // 0.1-2 m¬≤/s
        
        // S√©lection du type de fum√©e selon la densit√©
        this.s√©lectionnerTypeFum√©e();
        
        // Calcul des propri√©t√©s thermodynamiques
        this.calculerPropri√©t√©sThermodynamiques();
        
        // Initialisation du profil de temp√©rature
        this.initProfilTemp√©rature();
    }

    s√©lectionnerTypeFum√©e() {
        const typesDisponibles = Object.keys(this.biblioth√®queFum√©es);
        let typeChoisi;
        
        if (this.densit√©Fum√©e < 0.5) {
            typeChoisi = 'l√©g√®re';
        } else if (this.densit√©Fum√©e < 1.0) {
            typeChoisi = 'vapeur';
        } else if (this.densit√©Fum√©e < 2.0) {
            typeChoisi = 'standard';
        } else if (this.densit√©Fum√©e < 3.5) {
            typeChoisi = 'dense';
        } else {
            typeChoisi = 'toxique';
        }
        
        // Modification selon la temp√©rature
        if (this.temp√©ratureFluide < 350) {
            typeChoisi = 'brouillard';
        } else if (this.temp√©ratureFluide < 400) {
            typeChoisi = 'vapeur';
        }
        
        this.typeFum√©e = typeChoisi;
        const fumeeConfig = this.biblioth√®queFum√©es[typeChoisi];
        
        this.couleurFum√©e = fumeeConfig.couleur;
        this.dur√©eVie = fumeeConfig.dur√©e;
    }

    calculerPropri√©t√©sThermodynamiques() {
        // Calcul de la densit√© selon loi des gaz parfaits
        const T = this.temp√©ratureFluide; // K
        const P = this.pressionAtmosph√©rique; // Pa
        this.densit√©Air = P / (this.constantesPhysiques.R * T);
        
        // Calcul du nombre de Reynolds
        const L = 0.1; // m (longueur caract√©ristique)
        this.nombreReynolds = (this.densit√©Air * this.vitesseAscension * L) / this.viscosit√©Dynamique;
        
        // Calcul du nombre de Grashof (convection naturelle)
        const Œ≤ = 1 / T; // coefficient expansion thermique
        const ŒîT = T - 293; // diff√©rence temp√©rature ambiante
        this.nombreGrashof = (this.constantesPhysiques.g * Œ≤ * ŒîT * Math.pow(L, 3)) / Math.pow(this.viscosit√©Dynamique / this.densit√©Air, 2);
        
        // Calcul du nombre de Rayleigh
        this.nombreRayleigh = this.nombreGrashof * this.constantesPhysiques.Pr;
        
        // Enthalpie sp√©cifique
        this.enthalpieSp√©cifique = this.constantesPhysiques.Cp * T;
        
        // √ânergie thermique totale
        this.√©nergieThermique = this.densit√©Fum√©e * this.enthalpieSp√©cifique;
    }

    initProfilTemp√©rature() {
        this.profilVitesse = [];
        this.gradientTemp√©rature = [];
        const nombreCouches = 30;
        
        for (let i = 0; i < nombreCouches; i++) {
            const altitude = (i / (nombreCouches - 1)) * 500; // 0-500m
            
            // Profil de temp√©rature avec gradient adiabatique
            const T_altitude = this.temp√©ratureFluide - 0.0065 * altitude; // K
            
            // Profil de vitesse avec convection
            const vitesse_altitude = this.vitesseAscension * Math.sqrt(T_altitude / this.temp√©ratureFluide);
            
            // Turbulence d√©croissante avec altitude
            const turbulence_altitude = this.niveauTurbulence * Math.exp(-altitude / 200);
            
            this.profilVitesse.push({
                altitude: altitude,
                temp√©rature: T_altitude,
                vitesse: vitesse_altitude,
                turbulence: turbulence_altitude,
                densit√©: this.pressionAtmosph√©rique / (this.constantesPhysiques.R * T_altitude),
                viscosit√©: this.viscosit√©Dynamique * Math.pow(T_altitude / 273, 0.76) // loi Sutherland
            });
            
            this.gradientTemp√©rature.push({
                altitude: altitude,
                gradient: -0.0065, // K/m
                flux_chaleur: -this.constantesPhysiques.k * (-0.0065), // W/m¬≤
                convection: vitesse_altitude > 0.1 ? 'forc√©e' : 'naturelle'
            });
        }
    }

    initParticulesFum√©e(element) {
        this.particulesFum√©e = [];
        this.distributionTailles = [];
        
        // Distribution log-normale des tailles de particules
        this.g√©n√©rerDistributionLogNormale();
        
        // G√©n√©ration initiale de particules
        this.g√©n√©rerParticulesFum√©eInitiales(element);
    }

    g√©n√©rerDistributionLogNormale() {
        // Distribution log-normale : f(d) = 1/(d*œÉ*‚àö(2œÄ)) * exp(-ln¬≤(d/Œº)/(2œÉ¬≤))
        const Œº = Math.log(1e-6); // diam√®tre m√©dian 1 Œºm
        const œÉ = 0.5; // √©cart-type g√©om√©trique
        
        this.distributionTailles = [];
        for (let d = 1e-7; d <= 1e-4; d *= 1.1) { // 0.1 √† 100 Œºm
            const ln_d = Math.log(d);
            const concentration = Math.exp(-Math.pow(ln_d - Œº, 2) / (2 * œÉ * œÉ)) / (d * œÉ * Math.sqrt(2 * Math.PI));
            
            this.distributionTailles.push({
                diam√®tre: d,
                concentration: concentration,
                probabilit√©: concentration / 1000 // Normalis√©e
            });
        }
    }

    g√©n√©rerParticulesFum√©eInitiales(element) {
        const nombreParticules = Math.floor(200 + this.densit√©Fum√©e * 100);
        
        for (let i = 0; i < nombreParticules; i++) {
            const particule = {
                id: i,
                x: Math.random() * element.width,
                y: element.height + Math.random() * 50, // Commencent en bas
                z: Math.random() * 100, // Profondeur pour effet 3D
                vx: (Math.random() - 0.5) * 0.5,
                vy: -this.vitesseAscension * (0.8 + Math.random() * 0.4),
                vz: (Math.random() - 0.5) * 0.3,
                diam√®tre: this.√©chantillonnerTailleParticule(),
                masse: 0,
                temp√©rature: this.temp√©ratureFluide * (0.9 + Math.random() * 0.2),
                √¢ge: 0,
                vie: 1.0,
                type: this.typeFum√©e,
                trajectoire: [],
                √©vaporation: false,
                coalescence: false,
                rotation: Math.random() * 2 * Math.PI,
                vitesseRotation: (Math.random() - 0.5) * 0.05,
                opacit√©: this.couleurFum√©e.a * (0.7 + Math.random() * 0.3),
                couleur: { ...this.couleurFum√©e }
            };
            
            // Calcul des propri√©t√©s physiques
            this.calculerPropri√©t√©sParticule(particule);
            
            this.particulesFum√©e.push(particule);
        }
    }

    √©chantillonnerTailleParticule() {
        // √âchantillonnage selon distribution log-normale
        const rand = Math.random();
        let cumul√©e = 0;
        
        for (const taille of this.distributionTailles) {
            cumul√©e += taille.probabilit√©;
            if (rand <= cumul√©e) {
                return taille.diam√®tre;
            }
        }
        
        return 1e-6; // 1 Œºm par d√©faut
    }

    calculerPropri√©t√©sParticule(particule) {
        // Masse de la particule (sph√®re)
        const volume = (4/3) * Math.PI * Math.pow(particule.diam√®tre / 2, 3);
        particule.masse = this.densit√©Fum√©e * volume;
        
        // Vitesse terminale (√©quilibre gravit√©-tra√Æn√©e)
        const Cd = 24 / this.nombreReynolds; // coefficient tra√Æn√©e Stokes
        const A = Math.PI * Math.pow(particule.diam√®tre / 2, 2); // section efficace
        particule.vitesseTerminale = Math.sqrt(2 * particule.masse * this.constantesPhysiques.g / (this.densit√©Air * Cd * A));
        
        // Nombre de Schmidt (diffusion)
        particule.nombreSchmidt = this.viscosit√©Dynamique / (this.densit√©Air * this.coefficientDispersion);
        
        // Temps de relaxation
        particule.tempsRelaxation = particule.masse / (6 * Math.PI * this.viscosit√©Dynamique * particule.diam√®tre / 2);
        
        // Coefficient de diffusion Brownienne
        const kB = 1.381e-23; // J/K
        particule.diffusionBrownienne = kB * particule.temp√©rature / (6 * Math.PI * this.viscosit√©Dynamique * particule.diam√®tre / 2);
    }

    initSourcesCombustion(element) {
        this.sourcesCombustion = [];
        this.zonesR√©action = [];
        
        // G√©n√©ration des sources de fum√©e
        this.g√©n√©rerSources√âmission(element);
    }

    g√©n√©rerSources√âmission(element) {
        const nombreSources = Math.floor(1 + this.densit√©Fum√©e);
        
        for (let i = 0; i < nombreSources; i++) {
            const source = {
                id: i,
                x: Math.random() * element.width,
                y: element.height - 20 - Math.random() * 50,
                rayon: 20 + Math.random() * 30,
                intensit√©: 0.5 + Math.random() * 0.5,
                temp√©rature: this.temp√©ratureFluide * (0.8 + Math.random() * 0.4),
                d√©bitMassique: this.densit√©Fum√©e * 0.1, // kg/s
                active: true,
                type: this.typeFum√©e,
                √¢ge: 0,
                dur√©eVie: this.dur√©eVie * (0.8 + Math.random() * 0.4),
                fluctuation: Math.random() * 0.3
            };
            
            this.sourcesCombustion.push(source);
        }
    }

    initTurbulenceFluide(element) {
        this.champTurbulence = [];
        this.distributionVorticit√© = [];
        
        // G√©n√©ration du champ de turbulence
        this.g√©n√©rerChampTurbulence(element);
    }

    g√©n√©rerChampTurbulence(element) {
        const r√©solution = 20; // points de grille
        const dx = element.width / r√©solution;
        const dy = element.height / r√©solution;
        
        for (let i = 0; i < r√©solution; i++) {
            for (let j = 0; j < r√©solution; j++) {
                const x = i * dx;
                const y = j * dy;
                
                // G√©n√©ration de turbulence avec bruit de Perlin
                const turbulence = {
                    x: x,
                    y: y,
                    vx: (Math.random() - 0.5) * this.niveauTurbulence * 2,
                    vy: (Math.random() - 0.5) * this.niveauTurbulence * 2,
                    vorticit√©: (Math.random() - 0.5) * this.niveauTurbulence,
                    intensit√©: this.niveauTurbulence * Math.random(),
                    √©chelle: 10 + Math.random() * 20,
                    fr√©quence: 0.1 + Math.random() * 0.5
                };
                
                this.champTurbulence.push(turbulence);
                
                // Calcul de la vorticit√© locale
                const œâ = Math.random() * this.niveauTurbulence * 2 - this.niveauTurbulence;
                this.distributionVorticit√©.push({
                    x: x,
                    y: y,
                    vorticit√©: œâ,
                    circulation: œâ * dx * dy,
                    dissipation: œâ * œâ * this.viscosit√©Dynamique
                });
            }
        }
    }

    initConvectionThermique(element) {
        this.volutesConvection = [];
        this.transfertChaleur = [];
        
        // G√©n√©ration des volutes de convection
        this.g√©n√©rerVolutesConvection(element);
    }

    g√©n√©rerVolutesConvection(element) {
        const nombreVolutes = Math.floor(5 + this.temp√©ratureFluide / 200);
        
        for (let i = 0; i < nombreVolutes; i++) {
            const volute = {
                id: i,
                x: Math.random() * element.width,
                y: element.height - Math.random() * 100,
                rayon: 30 + Math.random() * 50,
                intensit√©: 0.3 + Math.random() * 0.7,
                temp√©rature: this.temp√©ratureFluide * (0.9 + Math.random() * 0.2),
                vitesseRotation: (Math.random() - 0.5) * 0.1,
                vitesseAscension: this.vitesseAscension * (0.8 + Math.random() * 0.4),
                √¢ge: 0,
                vie: 1.0,
                type: 'convection',
                spirale: [],
                dissipation: 0.01 + Math.random() * 0.02
            };
            
            // G√©n√©ration de la spirale
            this.g√©n√©rerSpiraleVolute(volute);
            
            this.volutesConvection.push(volute);
        }
    }

    g√©n√©rerSpiraleVolute(volute) {
        volute.spirale = [];
        const nombrePoints = 20;
        
        for (let i = 0; i < nombrePoints; i++) {
            const angle = (i / nombrePoints) * 4 * Math.PI;
            const rayon = volute.rayon * (1 - i / nombrePoints);
            
            volute.spirale.push({
                x: volute.x + rayon * Math.cos(angle),
                y: volute.y + rayon * Math.sin(angle),
                rayon: rayon,
                angle: angle,
                vitesse: volute.vitesseAscension * (1 - i / nombrePoints),
                temp√©rature: volute.temp√©rature * (1 - i / nombrePoints * 0.3)
            });
        }
    }

    ajusterParam√®tresThermodynamiques(element) {
        // Adaptation selon la taille de l'√©l√©ment
        const volume = element.offsetWidth * element.offsetHeight * 100; // volume fictif
        const facteurTaille = Math.cbrt(volume) / 1000;
        
        // Ajustement de la vitesse selon le volume
        this.vitesseAscension *= facteurTaille;
        
        // Ajustement de la densit√© selon la surface
        this.densit√©Fum√©e *= Math.sqrt(element.offsetWidth * element.offsetHeight) / 1000;
        
        // Optimisation performance selon complexit√©
        this.optimiserPerformance(volume);
    }

    optimiserPerformance(volume) {
        if (volume > 1000000) { // Grand volume
            this.efficacit√©Rendu = 0.7;
            this.niveauTurbulence *= 0.8;
        } else if (volume < 100000) { // Petit volume
            this.efficacit√©Rendu = 1.0;
            this.niveauTurbulence *= 1.2;
        }
    }

    update(deltaTime) {
        this.temps += deltaTime;
        
        // Mise √† jour des particules de fum√©e
        this.mettre√ÄJourParticules(deltaTime);
        
        // Mise √† jour des volutes
        this.mettre√ÄJourVolutes(deltaTime);
        
        // Mise √† jour de la turbulence
        this.mettre√ÄJourTurbulence(deltaTime);
        
        // Mise √† jour des sources
        this.mettre√ÄJourSources(deltaTime);
        
        // Calcul de la convection
        this.calculerConvection();
        
        // Gestion du cycle de vie
        this.g√©rerCycleVie();
    }

    mettre√ÄJourParticules(deltaTime) {
        this.particulesFum√©e.forEach(particule => {
            // Forces appliqu√©es √† la particule
            const forces = this.calculerForces(particule);
            
            // Int√©gration des √©quations du mouvement (Verlet)
            const dt = deltaTime / 1000; // conversion ms -> s
            
            // Acc√©l√©ration
            const ax = forces.fx / particule.masse;
            const ay = forces.fy / particule.masse;
            const az = forces.fz / particule.masse;
            
            // Mise √† jour de la vitesse
            particule.vx += ax * dt;
            particule.vy += ay * dt;
            particule.vz += az * dt;
            
            // Limitation de la vitesse terminale
            const vitesseTotale = Math.sqrt(particule.vx*particule.vx + particule.vy*particule.vy + particule.vz*particule.vz);
            if (vitesseTotale > particule.vitesseTerminale) {
                const facteur = particule.vitesseTerminale / vitesseTotale;
                particule.vx *= facteur;
                particule.vy *= facteur;
                particule.vz *= facteur;
            }
            
            // Mise √† jour de la position
            particule.x += particule.vx * dt * 100; // conversion m -> px
            particule.y += particule.vy * dt * 100;
            particule.z += particule.vz * dt * 100;
            
            // Mise √† jour de l'√¢ge et de la vie
            particule.√¢ge += deltaTime;
            particule.vie = Math.max(0, 1 - particule.√¢ge / this.dur√©eVie);
            
            // √âvaporation progressive
            if (particule.temp√©rature > 373) { // K
                const taux√âvaporation = (particule.temp√©rature - 373) / 1000;
                particule.diam√®tre *= (1 - taux√âvaporation * dt);
                particule.opacit√© *= (1 - taux√âvaporation * dt * 2);
            }
            
            // Refroidissement
            particule.temp√©rature -= 50 * dt; // refroidissement 50 K/s
            particule.temp√©rature = Math.max(particule.temp√©rature, 293); // temp√©rature ambiante
            
            // Mise √† jour de la couleur selon la temp√©rature
            this.mettre√ÄJourCouleurParticule(particule);
            
            // Enregistrement de la trajectoire
            particule.trajectoire.push({ x: particule.x, y: particule.y, temps: this.temps });
            if (particule.trajectoire.length > 50) {
                particule.trajectoire.shift();
            }
        });
    }

    calculerForces(particule) {
        const forces = { fx: 0, fy: 0, fz: 0 };
        
        // Force de gravit√©
        forces.fy += particule.masse * this.constantesPhysiques.g;
        
        // Force de flottabilit√© (Archim√®de)
        const œÅ_particule = particule.masse / ((4/3) * Math.PI * Math.pow(particule.diam√®tre/2, 3));
        const forceFlottabilit√© = (this.densit√©Air - œÅ_particule) * this.constantesPhysiques.g * 
                                 ((4/3) * Math.PI * Math.pow(particule.diam√®tre/2, 3));
        forces.fy -= forceFlottabilit√©;
        
        // Force de tra√Æn√©e
        const vitesseRelative = Math.sqrt(particule.vx*particule.vx + particule.vy*particule.vy + particule.vz*particule.vz);
        const Re = this.densit√©Air * vitesseRelative * particule.diam√®tre / this.viscosit√©Dynamique;
        const Cd = Re < 1 ? 24/Re : 24/Re * (1 + 0.15 * Math.pow(Re, 0.687));
        const A = Math.PI * Math.pow(particule.diam√®tre/2, 2);
        const forceTra√Æn√©e = 0.5 * this.densit√©Air * vitesseRelative * vitesseRelative * Cd * A;
        
        if (vitesseRelative > 0) {
            forces.fx -= forceTra√Æn√©e * (particule.vx / vitesseRelative);
            forces.fy -= forceTra√Æn√©e * (particule.vy / vitesseRelative);
            forces.fz -= forceTra√Æn√©e * (particule.vz / vitesseRelative);
        }
        
        // Force de turbulence
        const turbulence = this.interpolerTurbulence(particule.x, particule.y);
        forces.fx += turbulence.vx * particule.masse * 10;
        forces.fy += turbulence.vy * particule.masse * 10;
        
        // Force thermophor√©tique
        const gradientT = this.calculerGradientTemp√©rature(particule.x, particule.y);
        const forceThermophor√®se = -0.55 * this.viscosit√©Dynamique * particule.diam√®tre * gradientT;
        forces.fy += forceThermophor√®se;
        
        // Force de diffusion Brownienne
        const forceBrownienne = Math.sqrt(2 * particule.diffusionBrownienne * particule.masse / (deltaTime/1000));
        forces.fx += (Math.random() - 0.5) * forceBrownienne;
        forces.fy += (Math.random() - 0.5) * forceBrownienne;
        forces.fz += (Math.random() - 0.5) * forceBrownienne;
        
        return forces;
    }

    interpolerTurbulence(x, y) {
        // Interpolation bilin√©aire du champ de turbulence
        const r√©solution = Math.sqrt(this.champTurbulence.length);
        const dx = window.innerWidth / r√©solution;
        const dy = window.innerHeight / r√©solution;
        
        const i = Math.floor(x / dx);
        const j = Math.floor(y / dy);
        
        if (i >= 0 && i < r√©solution-1 && j >= 0 && j < r√©solution-1) {
            const idx = j * r√©solution + i;
            const turbulence = this.champTurbulence[idx];
            return turbulence || { vx: 0, vy: 0 };
        }
        
        return { vx: 0, vy: 0 };
    }

    calculerGradientTemp√©rature(x, y) {
        // Calcul du gradient de temp√©rature local
        const hauteurNormalis√©e = y / window.innerHeight;
        return -0.0065 * (1 - hauteurNormalis√©e); // gradient adiabatique
    }

    mettre√ÄJourCouleurParticule(particule) {
        // Couleur selon la temp√©rature (corps noir)
        const T = particule.temp√©rature;
        let r, g, b;
        
        if (T < 400) {
            // Fum√©e froide - gris
            r = g = b = 100 + (T - 293) * 2;
        } else if (T < 800) {
            // Fum√©e chaude - gris chaud
            r = 120 + (T - 400) * 0.2;
            g = 120 + (T - 400) * 0.15;
            b = 120 + (T - 400) * 0.1;
        } else {
            // Fum√©e tr√®s chaude - orang√©e
            r = 200 + (T - 800) * 0.1;
            g = 150 + (T - 800) * 0.05;
            b = 100;
        }
        
        particule.couleur.r = Math.min(255, Math.max(0, r));
        particule.couleur.g = Math.min(255, Math.max(0, g));
        particule.couleur.b = Math.min(255, Math.max(0, b));
        particule.couleur.a = particule.opacit√© * particule.vie;
    }

    mettre√ÄJourVolutes(deltaTime) {
        this.volutesConvection.forEach(volute => {
            // Ascension de la volute
            volute.y -= volute.vitesseAscension * deltaTime / 1000 * 100;
            
            // Rotation de la volute
            volute.rotation = (volute.rotation || 0) + volute.vitesseRotation * deltaTime / 1000;
            
            // Expansion de la volute
            volute.rayon += volute.dissipation * deltaTime / 1000 * 100;
            
            // Mise √† jour de l'√¢ge
            volute.√¢ge += deltaTime;
            volute.vie = Math.max(0, 1 - volute.√¢ge / this.dur√©eVie);
            
            // Refroidissement
            volute.temp√©rature -= 30 * deltaTime / 1000;
            volute.temp√©rature = Math.max(volute.temp√©rature, 293);
            
            // Mise √† jour de la spirale
            volute.spirale.forEach((point, index) => {
                const angle = volute.rotation + (index / volute.spirale.length) * 4 * Math.PI;
                point.x = volute.x + point.rayon * Math.cos(angle);
                point.y = volute.y + point.rayon * Math.sin(angle) - index * 5;
                point.temp√©rature = volute.temp√©rature * (1 - index / volute.spirale.length * 0.3);
            });
        });
    }

    mettre√ÄJourTurbulence(deltaTime) {
        this.champTurbulence.forEach(turbulence => {
            // √âvolution temporelle de la turbulence
            const phase = this.temps * turbulence.fr√©quence / 1000;
            turbulence.vx = turbulence.intensit√© * Math.sin(phase) * this.niveauTurbulence;
            turbulence.vy = turbulence.intensit√© * Math.cos(phase * 1.3) * this.niveauTurbulence;
            
            // Dissipation visqueuse
            turbulence.intensit√© *= (1 - this.viscosit√©Dynamique * deltaTime / 10000);
            turbulence.intensit√© = Math.max(turbulence.intensit√©, 0.1);
        });
        
        // Mise √† jour de la vorticit√©
        this.distributionVorticit√©.forEach(vortex => {
            vortex.vorticit√© *= (1 - vortex.dissipation * deltaTime / 1000);
            vortex.circulation = vortex.vorticit√© * 100; // aire fictive
        });
    }

    mettre√ÄJourSources(deltaTime) {
        this.sourcesCombustion.forEach(source => {
            // Fluctuation de l'intensit√©
            source.intensit√© += (Math.random() - 0.5) * source.fluctuation * deltaTime / 1000;
            source.intensit√© = Math.max(0.1, Math.min(1.0, source.intensit√©));
            
            // √âmission de nouvelles particules
            if (source.active && Math.random() < source.intensit√© * deltaTime / 1000) {
                this.√©mettrePart iculeDepuisSource(source);
            }
            
            // Vieillissement de la source
            source.√¢ge += deltaTime;
            if (source.√¢ge > source.dur√©eVie) {
                source.active = false;
            }
        });
    }

    √©mettreParticuleDepuisSource(source) {
        const nouvelleParticule = {
            id: Date.now() + Math.random(),
            x: source.x + (Math.random() - 0.5) * source.rayon,
            y: source.y + (Math.random() - 0.5) * source.rayon * 0.5,
            z: Math.random() * 50,
            vx: (Math.random() - 0.5) * 0.5,
            vy: -this.vitesseAscension * (0.8 + Math.random() * 0.4),
            vz: (Math.random() - 0.5) * 0.3,
            diam√®tre: this.√©chantillonnerTailleParticule(),
            masse: 0,
            temp√©rature: source.temp√©rature * (0.9 + Math.random() * 0.2),
            √¢ge: 0,
            vie: 1.0,
            type: source.type,
            trajectoire: [],
            √©vaporation: false,
            coalescence: false,
            rotation: Math.random() * 2 * Math.PI,
            vitesseRotation: (Math.random() - 0.5) * 0.05,
            opacit√©: this.couleurFum√©e.a * source.intensit√©,
            couleur: { ...this.couleurFum√©e }
        };
        
        this.calculerPropri√©t√©sParticule(nouvelleParticule);
        this.particulesFum√©e.push(nouvelleParticule);
    }

    calculerConvection() {
        // Calcul des cellules de convection
        this.transfertChaleur = [];
        
        this.sourcesCombustion.forEach(source => {
            if (source.active) {
                const celluleConvection = {
                    x: source.x,
                    y: source.y,
                    rayon: source.rayon * 2,
                    fluxChaleur: source.intensit√© * source.temp√©rature * 0.001, // W
                    vitesseConvection: Math.sqrt(this.constantesPhysiques.g * source.rayon * 
                                               (source.temp√©rature - 293) / 293),
                    nombreNusselt: 0.54 * Math.pow(this.nombreRayleigh, 0.25),
                    coefficientTransfert: this.constantesPhysiques.k / source.rayon
                };
                
                this.transfertChaleur.push(celluleConvection);
            }
        });
    }

    g√©rerCycleVie() {
        // Nettoyage des particules expir√©es
        this.particulesFum√©e = this.particulesFum√©e.filter(particule => 
            particule.vie > 0 && particule.y > -100 && particule.opacit√© > 0.01
        );
        
        // Nettoyage des volutes expir√©es
        this.volutesConvection = this.volutesConvection.filter(volute => 
            volute.vie > 0 && volute.y > -200
        );
        
        // G√©n√©ration de nouvelles sources si n√©cessaire
        if (this.sourcesCombustion.filter(s => s.active).length === 0) {
            this.g√©n√©rerSources√âmission({ width: window.innerWidth, height: window.innerHeight });
        }
        
        // Mise √† jour de l'historique
        this.mettre√ÄJourHistorique();
    }

    mettre√ÄJourHistorique() {
        const mesureActuelle = {
            temps: this.temps,
            nombreParticules: this.particulesFum√©e.length,
            nombreVolutes: this.volutesConvection.length,
            temp√©ratureMoyenne: this.calculerTemp√©ratureMoyenne(),
            densit√©Moyenne: this.densit√©Fum√©e,
            vitesseMoyenne: this.vitesseAscension,
            turbulenceMoyenne: this.niveauTurbulence,
            efficacit√©Rendu: this.efficacit√©Rendu
        };
        
        this.historiqueFluide.push(mesureActuelle);
        
        // Limitation de l'historique
        if (this.historiqueFluide.length > 100) {
            this.historiqueFluide.shift();
        }
    }

    calculerTemp√©ratureMoyenne() {
        if (this.particulesFum√©e.length === 0) return this.temp√©ratureFluide;
        
        const somme = this.particulesFum√©e.reduce((acc, p) => acc + p.temp√©rature, 0);
        return somme / this.particulesFum√©e.length;
    }

    render(ctx, canvas) {
        // Sauvegarde du contexte
        ctx.save();
        
        // Rendu des volutes de convection
        this.rendreVolutes(ctx);
        
        // Rendu des particules de fum√©e
        this.rendreParticules(ctx);
        
        // Rendu de la turbulence (optionnel)
        if (this.niveauTurbulence > 0.5) {
            this.rendreTurbulence(ctx);
        }
        
        // Rendu des sources
        this.rendreSources(ctx);
        
        // Restauration du contexte
        ctx.restore();
    }

    rendreParticules(ctx) {
        this.particulesFum√©e.forEach(particule => {
            if (particule.vie <= 0 || particule.opacit√© <= 0) return;
            
            ctx.save();
            
            // Configuration du style
            const couleur = particule.couleur;
            ctx.fillStyle = `rgba(${couleur.r}, ${couleur.g}, ${couleur.b}, ${couleur.a})`;
            ctx.globalAlpha = particule.opacit√© * particule.vie;
            
            // Taille de rendu
            const taille = Math.max(1, particule.diam√®tre * 1000000); // conversion m -> px
            
            // Effet de flou pour la fum√©e
            ctx.filter = `blur(${Math.max(1, taille * 0.3)}px)`;
            
            // Dessin de la particule
            ctx.beginPath();
            ctx.arc(particule.x, particule.y, taille, 0, 2 * Math.PI);
            ctx.fill();
            
            // Tra√Æn√©e de la particule (trajectoire)
            if (particule.trajectoire.length > 1) {
                ctx.strokeStyle = `rgba(${couleur.r}, ${couleur.g}, ${couleur.b}, ${couleur.a * 0.3})`;
                ctx.lineWidth = taille * 0.5;
                ctx.beginPath();
                ctx.moveTo(particule.trajectoire[0].x, particule.trajectoire[0].y);
                
                for (let i = 1; i < particule.trajectoire.length; i++) {
                    const alpha = i / particule.trajectoire.length;
                    ctx.globalAlpha = particule.opacit√© * alpha * 0.3;
                    ctx.lineTo(particule.trajectoire[i].x, particule.trajectoire[i].y);
                }
                ctx.stroke();
            }
            
            ctx.restore();
        });
    }

    rendreVolutes(ctx) {
        this.volutesConvection.forEach(volute => {
            if (volute.vie <= 0) return;
            
            ctx.save();
            
            // Couleur selon la temp√©rature
            const T = volute.temp√©rature;
            let r, g, b;
            if (T < 400) {
                r = g = b = 150;
            } else {
                r = 150 + (T - 400) * 0.2;
                g = 150 + (T - 400) * 0.1;
                b = 150;
            }
            
            ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${0.3 * volute.vie})`;
            ctx.lineWidth = 3;
            ctx.filter = 'blur(2px)';
            
            // Dessin de la spirale
            if (volute.spirale.length > 1) {
                ctx.beginPath();
                ctx.moveTo(volute.spirale[0].x, volute.spirale[0].y);
                
                for (let i = 1; i < volute.spirale.length; i++) {
                    const point = volute.spirale[i];
                    ctx.lineTo(point.x, point.y);
                }
                ctx.stroke();
            }
            
            // Centre de la volute
            ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${0.5 * volute.vie})`;
            ctx.beginPath();
            ctx.arc(volute.x, volute.y, volute.rayon * 0.1, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.restore();
        });
    }

    rendreTurbulence(ctx) {
        ctx.save();
        
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
        ctx.lineWidth = 1;
        
        this.champTurbulence.forEach(turbulence => {
            if (turbulence.intensit√© > 0.3) {
                const longueur = turbulence.intensit√© * 20;
                const angle = Math.atan2(turbulence.vy, turbulence.vx);
                
                ctx.beginPath();
                ctx.moveTo(turbulence.x, turbulence.y);
                ctx.lineTo(
                    turbulence.x + longueur * Math.cos(angle),
                    turbulence.y + longueur * Math.sin(angle)
                );
                ctx.stroke();
            }
        });
        
        ctx.restore();
    }

    rendreSources(ctx) {
        this.sourcesCombustion.forEach(source => {
            if (!source.active) return;
            
            ctx.save();
            
            // Couleur selon la temp√©rature et l'intensit√©
            const T = source.temp√©rature;
            const intensit√© = source.intensit√©;
            
            let r, g, b;
            if (T < 500) {
                r = 200 * intensit√©;
                g = 100 * intensit√©;
                b = 50 * intensit√©;
            } else {
                r = 255 * intensit√©;
                g = 150 * intensit√©;
                b = 100 * intensit√©;
            }
            
            // Gradient radial pour la source
            const gradient = ctx.createRadialGradient(
                source.x, source.y, 0,
                source.x, source.y, source.rayon
            );
            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${0.8 * intensit√©})`);
            gradient.addColorStop(0.5, `rgba(${r*0.7}, ${g*0.7}, ${b*0.7}, ${0.4 * intensit√©})`);
            gradient.addColorStop(1, `rgba(${r*0.3}, ${g*0.3}, ${b*0.3}, 0)`);
            
            ctx.fillStyle = gradient;
            ctx.filter = 'blur(3px)';
            
            // Dessin de la source
            ctx.beginPath();
            ctx.arc(source.x, source.y, source.rayon, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.restore();
        });
    }

    // M√©thodes de contr√¥le public
    d√©marrer() {
        this.combustionActive = true;
        this.temps = 0;
        this.sourcesCombustion.forEach(source => source.active = true);
    }

    arr√™ter() {
        this.combustionActive = false;
        this.sourcesCombustion.forEach(source => source.active = false);
    }

    red√©marrer() {
        this.arr√™ter();
        this.particulesFum√©e = [];
        this.volutesConvection = [];
        this.g√©n√©rerSources√âmission({ width: window.innerWidth, height: window.innerHeight });
        this.d√©marrer();
    }

    configurerDensit√©(nouvelleDensit√©) {
        this.densit√©Fum√©e = Math.max(0.1, Math.min(5.0, nouvelleDensit√©));
        this.parameters.densit√©.value = this.densit√©Fum√©e;
        this.s√©lectionnerTypeFum√©e();
    }

    configurerTemp√©rature(nouvelleTemp√©rature) {
        this.temp√©ratureFluide = Math.max(300, Math.min(1500, nouvelleTemp√©rature));
        this.parameters.temp√©rature.value = this.temp√©ratureFluide;
        this.calculerPropri√©t√©sThermodynamiques();
    }

    configurerVitesse(nouvelleVitesse) {
        this.vitesseAscension = Math.max(0.5, Math.min(10, nouvelleVitesse));
        this.parameters.vitesse.value = this.vitesseAscension;
    }

    obtenirStatistiques() {
        return {
            nombreParticules: this.particulesFum√©e.length,
            nombreVolutes: this.volutesConvection.length,
            nombreSources: this.sourcesCombustion.filter(s => s.active).length,
            densit√©Moyenne: this.densit√©Fum√©e,
            temp√©ratureMoyenne: this.calculerTemp√©ratureMoyenne(),
            vitesseMoyenne: this.vitesseAscension,
            turbulenceMoyenne: this.niveauTurbulence,
            efficacit√©Rendu: this.efficacit√©Rendu,
            typeFum√©e: this.typeFum√©e,
            nombreReynolds: this.nombreReynolds,
            nombreRayleigh: this.nombreRayleigh
        };
    }
}

// Classe de base pour les effets (si non d√©finie ailleurs)
class BaseEffect {
    constructor(config) {
        this.id = config.id;
        this.name = config.name;
        this.category = config.category;
        this.version = config.version;
        this.performance = config.performance;
        this.parameters = config.parameters;
    }
}

// Export de l'effet
export default SmokeSimulationEffect;



// ü§ñ Am√©liorations automatiques niveau 1:

// - Optimisation des performances
// - Harmonisation des couleurs
// - Am√©lioration de la compatibilit√©